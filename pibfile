
import os

include_paths = [
    "../../sdk/llvm/llvm/include",
    "../../sdk/llvm/build/include",
    "../../sdk/llvm/llvm/tools/clang/include",
    "../../sdk/llvm/build/tools/clang/include"
]

libs = [
    "clangParse.lib",
    "clangSema.lib",
    "clangAnalysis.lib",
    "clangAST.lib",
    "clangFrontend.lib",
    "clangLex.lib",
    "clangBasic.lib",
    "LLVMSupport.lib",
    "LLVMCore.lib",
    "LLVMMC.lib",
    "advapi32.lib",
    "shell32.lib"
]

lib_paths_debug = [
    "../../sdk/llvm/build/lib/debug"
]

lib_paths_release = [
    "../../sdk/llvm/build/lib/release"
]

defines = [
    "_SCL_SECURE_NO_WARNINGS",
    "_CRT_SECURE_NO_WARNINGS"
]

# These are to allow clang/llvm to compile without hogging the output window
disabled_warnings = [
    4146,                   # unary minus operator applied to unsigned type, result still unsigned
    4624,                   # 'clang::Preprocessor::MacroInfoChain' : destructor could not be generated because a base class destructor is inaccessible
    4800,                   # 'clang::NestedNameSpecifier *const ' : forcing value to bool 'true' or 'false' (performance warning)
    4355,                   # 'this' : used in base member initializer list
    4291,                   # 'void *operator new(size_t,void *) throw()' : no matching operator delete found; memory will not be freed if initialization throws an exception
    4244,                   # 'return' : conversion from 'uint64_t' to 'unsigned int', possible loss of data
]

config_debug = env.Configs["debug"]
config_release = env.Configs["release"]

config_debug.CPPOptions.IncludePaths = include_paths
config_debug.CPPOptions.Defines += defines
config_debug.CPPOptions.CRTType = MSVCPlatform.VCCRTType.MT_DEBUG_DLL
config_debug.CPPOptions.DisabledWarnings = disabled_warnings
config_debug.CPPOptions.UpdateCommandLine()
config_debug.LinkOptions.LibPaths = lib_paths_debug
config_debug.LinkOptions.Subsystem = MSVCPlatform.VCSubsystem.CONSOLE
config_debug.LinkOptions.UpdateCommandLine()

config_release.CPPOptions.IncludePaths = include_paths
config_release.CPPOptions.Defines += defines
config_release.CPPOptions.CRTType = MSVCPlatform.VCCRTType.MT_DLL
config_release.CPPOptions.DisabledWarnings = disabled_warnings
config_release.CPPOptions.UpdateCommandLine()
config_release.LinkOptions.LibPaths = lib_paths_release
config_release.LinkOptions.Subsystem = MSVCPlatform.VCSubsystem.CONSOLE
config_release.LinkOptions.UpdateCommandLine()

cpp_files = Glob("src/ClangReflectScan", "*.cpp")
hpp_files = Glob("src/ClangReflectScan", "*.h")
lib_files = [ env.NewFile(file) for file in libs ]
obj_files = [ env.CPPFile(file) for file in cpp_files ]

exe = env.Link("crscan.exe", obj_files, lib_files)
env.Build(exe)

VCGenerateProjectFile(env, "src/ClangReflectScan/ClangReflectScan", cpp_files + hpp_files, exe)
VCGenerateSolutionFile(env, "ClangReflect", [ "src/ClangReflectScan/ClangReflectScan" ])
