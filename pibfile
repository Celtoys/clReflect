
# TODO: Configs should be build-specific, not environment specific

import os
import ClangReflect

include_paths = [
    "../../sdk/llvm/llvm/include",
    "../../sdk/llvm/build/include",
    "../../sdk/llvm/llvm/tools/clang/include",
    "../../sdk/llvm/build/tools/clang/include"
]

libs = [
    "clangParse.lib",
    "clangSema.lib",
    "clangAnalysis.lib",
    "clangAST.lib",
    "clangFrontend.lib",
    "clangLex.lib",
    "clangBasic.lib",
    "LLVMSupport.lib",
    "LLVMCore.lib",
    "LLVMMC.lib",
    "advapi32.lib",
    "shell32.lib"
]

lib_paths_debug = [
    "../../sdk/llvm/build/lib/debug"
]

lib_paths_release = [
    "../../sdk/llvm/build/lib/release"
]

defines = [
    "_SCL_SECURE_NO_WARNINGS",
    "_CRT_SECURE_NO_WARNINGS"
]

# These are to allow clang/llvm to compile without hogging the output window
disabled_warnings = [
    4146,                   # unary minus operator applied to unsigned type, result still unsigned
    4624,                   # 'clang::Preprocessor::MacroInfoChain' : destructor could not be generated because a base class destructor is inaccessible
    4800,                   # 'clang::NestedNameSpecifier *const ' : forcing value to bool 'true' or 'false' (performance warning)
    4355,                   # 'this' : used in base member initializer list
    4291,                   # 'void *operator new(size_t,void *) throw()' : no matching operator delete found; memory will not be freed if initialization throws an exception
    4244,                   # 'return' : conversion from 'uint64_t' to 'unsigned int', possible loss of data
]


def SetCPPOptions(name, crt_type):
    opts = env.Configs[name].CPPOptions
    opts.IncludePaths = include_paths
    opts.DisabledWarnings = disabled_warnings
    opts.Defines += defines
    opts.CRTType = crt_type
    opts.UpdateCommandLine()

def SetLinkOptions(name, lib_paths):
    opts = env.Configs[name].LinkOptions
    opts.LibPaths = lib_paths
    opts.Subsystem = MSVCPlatform.VCSubsystem.CONSOLE
    opts.UpdateCommandLine()


SetCPPOptions("debug", MSVCPlatform.VCCRTType.MT_DEBUG_DLL)
SetLinkOptions("debug", lib_paths_debug)

SetCPPOptions("release", MSVCPlatform.VCCRTType.MT_DLL)
SetLinkOptions("release", lib_paths_release)


cpp_files = Glob("src/ClangReflectScan", "*.cpp")
hpp_files = Glob("src/ClangReflectScan", "*.h")
lib_files = [ env.NewFile(file) for file in libs ]
obj_files = [ env.CPPFile(file) for file in cpp_files ]

exe = env.Link("crscan.exe", obj_files, lib_files)
env.Build(exe, "crscan")

# TODO: Probably going to have to flatten the graph before visiting
# test_obj_files is traversed twice below!
test_cpp_files = Glob("src/ClangReflectTest", "*.cpp")
test_obj_files = [ env.CPPFile(file) for file in test_cpp_files ]
test_cvs_files = [ ClangReflect.CppScanNode(file) for file in test_obj_files ]
env.Build(test_obj_files + test_cvs_files, "crtest")

VCGenerateProjectFile(env, "src/ClangReflectScan/ClangReflectScan", cpp_files + hpp_files, exe, "crscan")
VCGenerateSolutionFile(env, "ClangReflect", [ "src/ClangReflectScan/ClangReflectScan", "src/ClangReflectTest/ClangReflectTest" ])
