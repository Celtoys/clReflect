
# TODO: Configs should be build-specific, not environment specific

import ClangReflect


include_paths = [
    "../../sdk/llvm/llvm/include",
    "../../sdk/llvm/build/include",
    "../../sdk/llvm/llvm/tools/clang/include",
    "../../sdk/llvm/build/tools/clang/include",
    "src",
    "inc",
]


libs = [
    "clangParse.lib",
    "clangSema.lib",
    "clangAnalysis.lib",
    "clangAST.lib",
    "clangFrontend.lib",
    "clangLex.lib",
    "clangBasic.lib",
    "LLVMSupport.lib",
    "LLVMCore.lib",
    "LLVMMC.lib",
    "advapi32.lib",
    "shell32.lib"
]


lib_paths_debug = [
    "../../sdk/llvm/build/lib/debug"
]


lib_paths_release = [
    "../../sdk/llvm/build/lib/release"
]


defines = [
    "_SCL_SECURE_NO_WARNINGS",
    "_CRT_SECURE_NO_WARNINGS"
]


# These are to allow clang/llvm to compile without hogging the output window
disabled_warnings = [
    4146,                   # unary minus operator applied to unsigned type, result still unsigned
    4624,                   # 'clang::Preprocessor::MacroInfoChain' : destructor could not be generated because a base class destructor is inaccessible
    4800,                   # 'clang::NestedNameSpecifier *const ' : forcing value to bool 'true' or 'false' (performance warning)
    4355,                   # 'this' : used in base member initializer list
    4291,                   # 'void *operator new(size_t,void *) throw()' : no matching operator delete found; memory will not be freed if initialization throws an exception
    4244,                   # 'return' : conversion from 'uint64_t' to 'unsigned int', possible loss of data
]


def SetCPPOptions(name, crt_type):
    opts = env.Configs[name].CPPOptions
    opts.IncludePaths = include_paths
    opts.DisabledWarnings = disabled_warnings
    opts.Defines += defines
    opts.CRTType = crt_type
    opts.UpdateCommandLine()

def SetLinkOptions(name, lib_paths):
    opts = env.Configs[name].LinkOptions
    opts.LibPaths = lib_paths
    opts.Subsystem = MSVCPlatform.VCSubsystem.CONSOLE
    opts.MapFile = True
    opts.UpdateCommandLine()


SetCPPOptions("debug", MSVCPlatform.VCCRTType.MT_DEBUG_DLL)
SetLinkOptions("debug", lib_paths_debug)

SetCPPOptions("release", MSVCPlatform.VCCRTType.MT_DLL)
SetLinkOptions("release", lib_paths_release)


# Experimental build class for automatings a few steps
class CppBuildExe:
    
    def __init__(self, env, dirs, target, ext_libs = [], libs = [], build = True):

        # Gather source/header files
        self.cpp_files = []
        self.hpp_files = []
        for dir in dirs:
            self.cpp_files += Glob(dir, "*.cpp")
            self.hpp_files += Glob(dir, "*.h")

        # Compile C++ files and create file nodes out of external library references
        self.obj_files = [ env.CPPFile(file) for file in self.cpp_files ]
        self.lib_files = [ env.NewFile(file) for file in ext_libs ]

        # Link or use librarian dependent on output path
        target = target.lower()
        self.output = None
        if target.endswith(".exe"):
            self.output = self.exe = env.Link(target, self.obj_files, self.lib_files + libs)
        elif target.endswith(".lib"):
            self.output = self.lib = env.Lib(target, self.obj_files)
        
        if build:
            env.Build(self.output, target[:-4])


# Build the C++ API
crcpp = CppBuildExe(env, [ "src/ClangReflectCpp" ], "crcpp.lib")
crcpp.api_files = Glob("inc", "*.h")

# Build the core library
crcore = CppBuildExe(env, [ "src/ClangReflectCore" ], "crcore.lib")

# Build the scanner
crscan = CppBuildExe(env, [ "src/ClangReflectScan" ], "crscan.exe", libs, [ crcore.lib, crcpp.lib ])

# Build the merger
crmerge = CppBuildExe(env, [ "src/ClangReflectMerge" ], "crmerge.exe", [], [ crcore.lib, crcpp.lib ])

# Build the exporter
crexport = CppBuildExe(env, [ "src/ClangReflectExport" ], "crexport.exe", [ "dbghelp.lib" ], [ crcore.lib, crcpp.lib ])

# Build the test code
crtest = CppBuildExe(env, [ "src/ClangReflectTest" ], "crtest.exe", [], [ crcpp.lib ], False)

# Inject the ClangReflect build dependencies
# TODO: Probably going to have to flatten the graph before visiting
# test_obj_files is traversed twice below!
crtest.csv_files = [ ClangReflect.CppScan(include_paths, file) for file in crtest.obj_files ]
crtest.db_file = ClangReflect.Merge("ClangReflectTest.csv", crtest.csv_files)
crtest.cppbin_file = ClangReflect.CppExport("ClangReflectTest.cppbin", crtest.db_file, crtest.output.GetOutputFiles(env)[1])
env.Build([ crtest.exe, crtest.cppbin_file ], "crtest")


# Generate MSVC project files
VCGenerateProjectFile(env, "src/ClangReflectCpp/ClangReflectCpp", crcpp.cpp_files + crcpp.hpp_files + crcpp.api_files, crcpp.lib, "crcpp", [ ("..\\..\\inc", "Public API") ])
VCGenerateProjectFile(env, "src/ClangReflectCore/ClangReflectCore", crcore.cpp_files + crcore.hpp_files, crcore.lib, "crcore")
VCGenerateProjectFile(env, "src/ClangReflectScan/ClangReflectScan", crscan.cpp_files + crscan.hpp_files, crscan.exe, "crscan")
VCGenerateProjectFile(env, "src/ClangReflectMerge/ClangReflectMerge", crmerge.cpp_files + crmerge.hpp_files, crmerge.exe, "crmerge")
VCGenerateProjectFile(env, "src/ClangReflectExport/ClangReflectExport", crexport.cpp_files + crexport.hpp_files, crexport.exe, "crexport")
VCGenerateProjectFile(env, "src/ClangReflectTest/ClangReflectTest", crtest.cpp_files, crtest.exe, "crtest")
VCGenerateSolutionFile(env, "ClangReflect", [
    "src/ClangReflectCpp/ClangReflectCpp",
    "src/ClangReflectCore/ClangReflectCore",
    "src/ClangReflectScan/ClangReflectScan",
    "src/ClangReflectMerge/ClangReflectMerge",
    "src/ClangReflectExport/ClangReflectExport",
    "src/ClangReflectTest/ClangReflectTest" ])
