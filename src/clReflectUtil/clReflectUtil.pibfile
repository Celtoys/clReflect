
include_paths = [
	"../../inc",
]

defines = [
	"_SCL_SECURE_NO_WARNINGS",
	"_CRT_SECURE_NO_WARNINGS"
]

config = env.Configs["debug"]
config.IntermediatePath = "../../build/obj/debug/clReflectUtil"
config.OutputPath = "../../build/bin/debug"
config.CPPOptions.IncludePaths += include_paths
config.CPPOptions.Defines += defines
config.CPPOptions.CRTType = MSVCPlatform.VCCRTType.MT_DEBUG_DLL
config.LibOptions.NoDefaultLibs = True


config = env.Configs["release"]
config.IntermediatePath = "../../build/obj/release/clReflectUtil"
config.OutputPath = "../../build/bin/release"
config.CPPOptions.IncludePaths += include_paths
config.CPPOptions.Defines += defines
config.CPPOptions.CRTType = MSVCPlatform.VCCRTType.MT_DLL
config.LibOptions.NoDefaultLibs = True

# Build the library
clutil = CppBuild(env, [ "." ], "clutil.lib")
clutil.hpp_files += Glob("../../inc/clutl", "*.h")

pibfile = "clReflectUtil.pibfile"
VCGenerateProjectFile(env, "clReflectUtil", clutil.cpp_files + clutil.hpp_files + [ pibfile ], clutil.output, replacements = [ ("..\\..\\inc\\clutl", "Public API\\clutl") ], pibfile = pibfile)
