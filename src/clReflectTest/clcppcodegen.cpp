// dcf0a01c
// Generated by clmerge.exe - do not edit!
#include <clcpp/clcpp.h>

// Array of type name hases and pointers
static const int clcppNbTypes = 96;
static unsigned int clcppTypeNameHashes[clcppNbTypes] = { 0 };
static const clcpp::Type* clcppTypePtrs[clcppNbTypes] = { 0 };

void clcppInitGetType(const clcpp::Database* db)
{
	// Specify hashes for all known types
	clcppTypeNameHashes[0] = 0x8779754;
	clcppTypeNameHashes[1] = 0xd0bb24f;
	clcppTypeNameHashes[2] = 0x1112eb00;
	clcppTypeNameHashes[3] = 0x117ff9b6;
	clcppTypeNameHashes[4] = 0x122ac7cf;
	clcppTypeNameHashes[5] = 0x128ebf74;
	clcppTypeNameHashes[6] = 0x129358ce;
	clcppTypeNameHashes[7] = 0x193e485d;
	clcppTypeNameHashes[8] = 0x1c6f55c2;
	clcppTypeNameHashes[9] = 0x1ec3c317;
	clcppTypeNameHashes[10] = 0x1fa94273;
	clcppTypeNameHashes[11] = 0x200bec8d;
	clcppTypeNameHashes[12] = 0x28a200b3;
	clcppTypeNameHashes[13] = 0x28b508b3;
	clcppTypeNameHashes[14] = 0x2a1bc276;
	clcppTypeNameHashes[15] = 0x2aa81423;
	clcppTypeNameHashes[16] = 0x2bcdcfd4;
	clcppTypeNameHashes[17] = 0x2bd9d03e;
	clcppTypeNameHashes[18] = 0x306dfb55;
	clcppTypeNameHashes[19] = 0x32443fe7;
	clcppTypeNameHashes[20] = 0x4849eaf1;
	clcppTypeNameHashes[21] = 0x48617e5e;
	clcppTypeNameHashes[22] = 0x4d183461;
	clcppTypeNameHashes[23] = 0x53c436fc;
	clcppTypeNameHashes[24] = 0x58b222f3;
	clcppTypeNameHashes[25] = 0x5b12caaf;
	clcppTypeNameHashes[26] = 0x5b297223;
	clcppTypeNameHashes[27] = 0x5c5e4fed;
	clcppTypeNameHashes[28] = 0x5e48cf7e;
	clcppTypeNameHashes[29] = 0x5f2e8b87;
	clcppTypeNameHashes[30] = 0x5fffecc7;
	clcppTypeNameHashes[31] = 0x606339c0;
	clcppTypeNameHashes[32] = 0x6ffaf3d1;
	clcppTypeNameHashes[33] = 0x79596665;
	clcppTypeNameHashes[34] = 0x7cf15831;
	clcppTypeNameHashes[35] = 0x7d919415;
	clcppTypeNameHashes[36] = 0x7dae28a6;
	clcppTypeNameHashes[37] = 0x8268b4f5;
	clcppTypeNameHashes[38] = 0x879ffff9;
	clcppTypeNameHashes[39] = 0x9239313e;
	clcppTypeNameHashes[40] = 0x98bbe057;
	clcppTypeNameHashes[41] = 0xa1ac1377;
	clcppTypeNameHashes[42] = 0xaa62cff5;
	clcppTypeNameHashes[43] = 0xb094f8ca;
	clcppTypeNameHashes[44] = 0xb23c6445;
	clcppTypeNameHashes[45] = 0xb43e823a;
	clcppTypeNameHashes[46] = 0xb6f19d2a;
	clcppTypeNameHashes[47] = 0xb7d04294;
	clcppTypeNameHashes[48] = 0xbc70ea82;
	clcppTypeNameHashes[49] = 0xbd4ac0ce;
	clcppTypeNameHashes[50] = 0xbed2c1df;
	clcppTypeNameHashes[51] = 0xc48d6fab;
	clcppTypeNameHashes[52] = 0xc7e08e95;
	clcppTypeNameHashes[53] = 0xcb408e5a;
	clcppTypeNameHashes[54] = 0xcec33cb6;
	clcppTypeNameHashes[55] = 0xd08a233b;
	clcppTypeNameHashes[56] = 0xd7d9b2da;
	clcppTypeNameHashes[57] = 0xd9d63cf4;
	clcppTypeNameHashes[58] = 0xdce5d7ca;
	clcppTypeNameHashes[59] = 0xdd6a1817;
	clcppTypeNameHashes[60] = 0xe3f51cfb;
	clcppTypeNameHashes[61] = 0xe52b5d7c;
	clcppTypeNameHashes[62] = 0xea5fbc5c;
	clcppTypeNameHashes[63] = 0xed9cb91d;
	clcppTypeNameHashes[64] = 0xf48810d5;
	clcppTypeNameHashes[65] = 0xfdaee797;
	clcppTypeNameHashes[66] = 0xfded8cf0;
	clcppTypeNameHashes[67] = 0x80e9c2f;
	clcppTypeNameHashes[68] = 0xcd202b4;
	clcppTypeNameHashes[69] = 0xe7b9fed;
	clcppTypeNameHashes[70] = 0x197dc8fa;
	clcppTypeNameHashes[71] = 0x2b306cdd;
	clcppTypeNameHashes[72] = 0x4da531a1;
	clcppTypeNameHashes[73] = 0x66a0c9b9;
	clcppTypeNameHashes[74] = 0x670073ec;
	clcppTypeNameHashes[75] = 0x7fc1fd67;
	clcppTypeNameHashes[76] = 0x8b4988f1;
	clcppTypeNameHashes[77] = 0xc4adb08c;
	clcppTypeNameHashes[78] = 0xda7ad107;
	clcppTypeNameHashes[79] = 0xeb9bd0d4;
	clcppTypeNameHashes[80] = 0xf8875b4f;
	clcppTypeNameHashes[81] = 0x73da4a;
	clcppTypeNameHashes[82] = 0x815d47a;
	clcppTypeNameHashes[83] = 0x311714bf;
	clcppTypeNameHashes[84] = 0x34a7768f;
	clcppTypeNameHashes[85] = 0x38da33ef;
	clcppTypeNameHashes[86] = 0x49400eb8;
	clcppTypeNameHashes[87] = 0x532220b8;
	clcppTypeNameHashes[88] = 0x68e6d3ff;
	clcppTypeNameHashes[89] = 0x8fd0d24a;
	clcppTypeNameHashes[90] = 0x919d1bf1;
	clcppTypeNameHashes[91] = 0x91ee210a;
	clcppTypeNameHashes[92] = 0x95fb9fe8;
	clcppTypeNameHashes[93] = 0xb7155e0b;
	clcppTypeNameHashes[94] = 0xc058aa24;
	clcppTypeNameHashes[95] = 0xce831ddf;
	
	// Populate the type pointer array if a database is specified
	if (db != 0)
	{
		for (int i = 0; i < clcppNbTypes; i++)
			clcppTypePtrs[i] = db->GetType(clcppTypeNameHashes[i]);
	}
}

// Forward declarations for all known types
namespace Stuff
{
	struct NestedStruct;
	struct BaseStruct;
	struct DerivedStruct;
	enum NoInit;
	enum SomeEnum;
}
namespace NamespaceB
{
	struct AnotherSecondNamedNSClass;
	struct SecondNamedNSClass;
	enum SecondNamedNSEnum;
	enum AnotherSecondNamedEnum;
}
namespace NamespaceA
{
	struct NamedNSClassB;
	struct NamedNSClassA;
	class ShouldReflect;
	enum NamedNSEnumA;
	enum NamedNSEnumB;
}
namespace NamespaceF
{
	namespace NamespaceA
	{
		class ShouldReflect;
	}
	class ClassA;
	enum EnumA;
}
namespace clcpp
{
	struct IWriteIterator;
	struct IReadIterator;
}
namespace jsontest
{
	struct BaseStruct;
	struct NestedStruct;
	struct AllFields;
	enum NoInit;
	enum Value;
}
namespace TestArrays
{
	struct S;
}
namespace TestTypedefs
{
	struct Fields;
	class AliasedType;
	struct Container;
}
namespace TestMissingType
{
	struct Struct;
	struct Inherit;
}
namespace Funcs
{
	struct DoubleStruct;
	struct CharStruct;
	struct Container;
	struct BigStruct;
	struct ThreeStruct;
	struct OddStruct;
	struct EmptyStruct;
}
namespace TestTemplates
{
	struct ParamClass;
	struct ParamStruct;
	struct Fields;
	enum ParamEnum;
}
namespace Offsets
{
	struct A;
	struct DerivedPolymorphicStruct;
	struct C;
	struct DoubleInPolymorphincStructWithPODBase;
	struct B;
	struct DoubleStructInPolymorphicStruct;
	struct PODBase;
	struct DerivedPolymorphicWithPODBase;
	struct Int64InPolymorphicStruct;
	struct K;
	struct PolymorphicStruct;
	struct H;
	struct DoubleStruct;
	struct I;
	struct J;
	struct E;
	struct VirtualInheritanceBase;
	struct DoubleInPolymorphicStruct;
	struct D;
	struct VirtualInheritancePolymorphicBase;
	struct F;
}
namespace OuterNamespace
{
	namespace InnerNamespace
	{
		struct OuterClass;
		enum InnerNSEnum;
	}
}
namespace Inheritance
{
	struct DerivedClass;
	struct ErrorClass;
	struct BaseClass;
	struct MultipleInheritanceClass;
}
namespace TestCollections
{
	struct Struct;
}
namespace TestAttributes
{
	class ClassAttr;
	struct StructAttr;
	enum GlobalEnumAttr;
}
namespace TestClassImpl
{
	class A;
	struct B;
}
class ClassA;
struct StructGlobalA;
class FieldTypes;
class ClassGlobalA;
struct Blah2;
enum EnumA;
enum NamedGlobalEnum;

// Specialisations for GetType and GetTypeNameHash
namespace clcpp
{
	template <> const Type* GetType<Offsets::A>() { return clcppTypePtrs[0]; }
	template <> unsigned int GetTypeNameHash<Offsets::A>() { return clcppTypeNameHashes[0]; }
	template <> const Type* GetType<TestMissingType::Struct>() { return clcppTypePtrs[1]; }
	template <> unsigned int GetTypeNameHash<TestMissingType::Struct>() { return clcppTypeNameHashes[1]; }
	template <> const Type* GetType<jsontest::BaseStruct>() { return clcppTypePtrs[2]; }
	template <> unsigned int GetTypeNameHash<jsontest::BaseStruct>() { return clcppTypeNameHashes[2]; }
	template <> const Type* GetType<Offsets::DerivedPolymorphicStruct>() { return clcppTypePtrs[3]; }
	template <> unsigned int GetTypeNameHash<Offsets::DerivedPolymorphicStruct>() { return clcppTypeNameHashes[3]; }
	template <> const Type* GetType<TestTemplates::ParamClass>() { return clcppTypePtrs[4]; }
	template <> unsigned int GetTypeNameHash<TestTemplates::ParamClass>() { return clcppTypeNameHashes[4]; }
	template <> const Type* GetType<TestClassImpl::A>() { return clcppTypePtrs[5]; }
	template <> unsigned int GetTypeNameHash<TestClassImpl::A>() { return clcppTypeNameHashes[5]; }
	template <> const Type* GetType<Offsets::C>() { return clcppTypePtrs[6]; }
	template <> unsigned int GetTypeNameHash<Offsets::C>() { return clcppTypeNameHashes[6]; }
	template <> const Type* GetType<Funcs::DoubleStruct>() { return clcppTypePtrs[7]; }
	template <> unsigned int GetTypeNameHash<Funcs::DoubleStruct>() { return clcppTypeNameHashes[7]; }
	template <> const Type* GetType<ClassA>() { return clcppTypePtrs[8]; }
	template <> unsigned int GetTypeNameHash<ClassA>() { return clcppTypeNameHashes[8]; }
	template <> const Type* GetType<TestTypedefs::Fields>() { return clcppTypePtrs[9]; }
	template <> unsigned int GetTypeNameHash<TestTypedefs::Fields>() { return clcppTypeNameHashes[9]; }
	template <> const Type* GetType<Offsets::DoubleInPolymorphincStructWithPODBase>() { return clcppTypePtrs[10]; }
	template <> unsigned int GetTypeNameHash<Offsets::DoubleInPolymorphincStructWithPODBase>() { return clcppTypeNameHashes[10]; }
	template <> const Type* GetType<Offsets::B>() { return clcppTypePtrs[11]; }
	template <> unsigned int GetTypeNameHash<Offsets::B>() { return clcppTypeNameHashes[11]; }
	template <> const Type* GetType<TestCollections::Struct>() { return clcppTypePtrs[12]; }
	template <> unsigned int GetTypeNameHash<TestCollections::Struct>() { return clcppTypeNameHashes[12]; }
	template <> const Type* GetType<NamespaceF::ClassA>() { return clcppTypePtrs[13]; }
	template <> unsigned int GetTypeNameHash<NamespaceF::ClassA>() { return clcppTypeNameHashes[13]; }
	template <> const Type* GetType<NamespaceF::NamespaceA::ShouldReflect>() { return clcppTypePtrs[14]; }
	template <> unsigned int GetTypeNameHash<NamespaceF::NamespaceA::ShouldReflect>() { return clcppTypeNameHashes[14]; }
	template <> const Type* GetType<Funcs::CharStruct>() { return clcppTypePtrs[15]; }
	template <> unsigned int GetTypeNameHash<Funcs::CharStruct>() { return clcppTypeNameHashes[15]; }
	template <> const Type* GetType<TestTypedefs::AliasedType>() { return clcppTypePtrs[16]; }
	template <> unsigned int GetTypeNameHash<TestTypedefs::AliasedType>() { return clcppTypeNameHashes[16]; }
	template <> const Type* GetType<Offsets::DoubleStructInPolymorphicStruct>() { return clcppTypePtrs[17]; }
	template <> unsigned int GetTypeNameHash<Offsets::DoubleStructInPolymorphicStruct>() { return clcppTypeNameHashes[17]; }
	template <> const Type* GetType<NamespaceA::NamedNSClassB>() { return clcppTypePtrs[18]; }
	template <> unsigned int GetTypeNameHash<NamespaceA::NamedNSClassB>() { return clcppTypeNameHashes[18]; }
	template <> const Type* GetType<clcpp::IWriteIterator>() { return clcppTypePtrs[19]; }
	template <> unsigned int GetTypeNameHash<clcpp::IWriteIterator>() { return clcppTypeNameHashes[19]; }
	template <> const Type* GetType<Funcs::Container>() { return clcppTypePtrs[20]; }
	template <> unsigned int GetTypeNameHash<Funcs::Container>() { return clcppTypeNameHashes[20]; }
	template <> const Type* GetType<Offsets::PODBase>() { return clcppTypePtrs[21]; }
	template <> unsigned int GetTypeNameHash<Offsets::PODBase>() { return clcppTypeNameHashes[21]; }
	template <> const Type* GetType<jsontest::NestedStruct>() { return clcppTypePtrs[22]; }
	template <> unsigned int GetTypeNameHash<jsontest::NestedStruct>() { return clcppTypeNameHashes[22]; }
	template <> const Type* GetType<Funcs::BigStruct>() { return clcppTypePtrs[23]; }
	template <> unsigned int GetTypeNameHash<Funcs::BigStruct>() { return clcppTypeNameHashes[23]; }
	template <> const Type* GetType<Offsets::DerivedPolymorphicWithPODBase>() { return clcppTypePtrs[24]; }
	template <> unsigned int GetTypeNameHash<Offsets::DerivedPolymorphicWithPODBase>() { return clcppTypeNameHashes[24]; }
	template <> const Type* GetType<NamespaceB::AnotherSecondNamedNSClass>() { return clcppTypePtrs[25]; }
	template <> unsigned int GetTypeNameHash<NamespaceB::AnotherSecondNamedNSClass>() { return clcppTypeNameHashes[25]; }
	template <> const Type* GetType<NamespaceB::SecondNamedNSClass>() { return clcppTypePtrs[26]; }
	template <> unsigned int GetTypeNameHash<NamespaceB::SecondNamedNSClass>() { return clcppTypeNameHashes[26]; }
	template <> const Type* GetType<Offsets::Int64InPolymorphicStruct>() { return clcppTypePtrs[27]; }
	template <> unsigned int GetTypeNameHash<Offsets::Int64InPolymorphicStruct>() { return clcppTypeNameHashes[27]; }
	template <> const Type* GetType<TestClassImpl::B>() { return clcppTypePtrs[28]; }
	template <> unsigned int GetTypeNameHash<TestClassImpl::B>() { return clcppTypeNameHashes[28]; }
	template <> const Type* GetType<TestTemplates::ParamStruct>() { return clcppTypePtrs[29]; }
	template <> unsigned int GetTypeNameHash<TestTemplates::ParamStruct>() { return clcppTypeNameHashes[29]; }
	template <> const Type* GetType<Stuff::NestedStruct>() { return clcppTypePtrs[30]; }
	template <> unsigned int GetTypeNameHash<Stuff::NestedStruct>() { return clcppTypeNameHashes[30]; }
	template <> const Type* GetType<Inheritance::DerivedClass>() { return clcppTypePtrs[31]; }
	template <> unsigned int GetTypeNameHash<Inheritance::DerivedClass>() { return clcppTypeNameHashes[31]; }
	template <> const Type* GetType<OuterNamespace::InnerNamespace::OuterClass>() { return clcppTypePtrs[32]; }
	template <> unsigned int GetTypeNameHash<OuterNamespace::InnerNamespace::OuterClass>() { return clcppTypeNameHashes[32]; }
	template <> const Type* GetType<StructGlobalA>() { return clcppTypePtrs[33]; }
	template <> unsigned int GetTypeNameHash<StructGlobalA>() { return clcppTypeNameHashes[33]; }
	template <> const Type* GetType<Funcs::ThreeStruct>() { return clcppTypePtrs[34]; }
	template <> unsigned int GetTypeNameHash<Funcs::ThreeStruct>() { return clcppTypeNameHashes[34]; }
	template <> const Type* GetType<Offsets::K>() { return clcppTypePtrs[35]; }
	template <> unsigned int GetTypeNameHash<Offsets::K>() { return clcppTypeNameHashes[35]; }
	template <> const Type* GetType<TestAttributes::ClassAttr>() { return clcppTypePtrs[36]; }
	template <> unsigned int GetTypeNameHash<TestAttributes::ClassAttr>() { return clcppTypeNameHashes[36]; }
	template <> const Type* GetType<Offsets::PolymorphicStruct>() { return clcppTypePtrs[37]; }
	template <> unsigned int GetTypeNameHash<Offsets::PolymorphicStruct>() { return clcppTypeNameHashes[37]; }
	template <> const Type* GetType<TestArrays::S>() { return clcppTypePtrs[38]; }
	template <> unsigned int GetTypeNameHash<TestArrays::S>() { return clcppTypeNameHashes[38]; }
	template <> const Type* GetType<TestAttributes::StructAttr>() { return clcppTypePtrs[39]; }
	template <> unsigned int GetTypeNameHash<TestAttributes::StructAttr>() { return clcppTypeNameHashes[39]; }
	template <> const Type* GetType<Inheritance::ErrorClass>() { return clcppTypePtrs[40]; }
	template <> unsigned int GetTypeNameHash<Inheritance::ErrorClass>() { return clcppTypeNameHashes[40]; }
	template <> const Type* GetType<Inheritance::BaseClass>() { return clcppTypePtrs[41]; }
	template <> unsigned int GetTypeNameHash<Inheritance::BaseClass>() { return clcppTypeNameHashes[41]; }
	template <> const Type* GetType<Offsets::H>() { return clcppTypePtrs[42]; }
	template <> unsigned int GetTypeNameHash<Offsets::H>() { return clcppTypeNameHashes[42]; }
	template <> const Type* GetType<Offsets::DoubleStruct>() { return clcppTypePtrs[43]; }
	template <> unsigned int GetTypeNameHash<Offsets::DoubleStruct>() { return clcppTypeNameHashes[43]; }
	template <> const Type* GetType<FieldTypes>() { return clcppTypePtrs[44]; }
	template <> unsigned int GetTypeNameHash<FieldTypes>() { return clcppTypeNameHashes[44]; }
	template <> const Type* GetType<Funcs::OddStruct>() { return clcppTypePtrs[45]; }
	template <> unsigned int GetTypeNameHash<Funcs::OddStruct>() { return clcppTypeNameHashes[45]; }
	template <> const Type* GetType<Stuff::BaseStruct>() { return clcppTypePtrs[46]; }
	template <> unsigned int GetTypeNameHash<Stuff::BaseStruct>() { return clcppTypeNameHashes[46]; }
	template <> const Type* GetType<TestMissingType::Inherit>() { return clcppTypePtrs[47]; }
	template <> unsigned int GetTypeNameHash<TestMissingType::Inherit>() { return clcppTypeNameHashes[47]; }
	template <> const Type* GetType<Offsets::I>() { return clcppTypePtrs[48]; }
	template <> unsigned int GetTypeNameHash<Offsets::I>() { return clcppTypeNameHashes[48]; }
	template <> const Type* GetType<ClassGlobalA>() { return clcppTypePtrs[49]; }
	template <> unsigned int GetTypeNameHash<ClassGlobalA>() { return clcppTypeNameHashes[49]; }
	template <> const Type* GetType<Offsets::J>() { return clcppTypePtrs[50]; }
	template <> unsigned int GetTypeNameHash<Offsets::J>() { return clcppTypeNameHashes[50]; }
	template <> const Type* GetType<Offsets::E>() { return clcppTypePtrs[51]; }
	template <> unsigned int GetTypeNameHash<Offsets::E>() { return clcppTypeNameHashes[51]; }
	template <> const Type* GetType<Funcs::EmptyStruct>() { return clcppTypePtrs[52]; }
	template <> unsigned int GetTypeNameHash<Funcs::EmptyStruct>() { return clcppTypeNameHashes[52]; }
	template <> const Type* GetType<clcpp::IReadIterator>() { return clcppTypePtrs[53]; }
	template <> unsigned int GetTypeNameHash<clcpp::IReadIterator>() { return clcppTypeNameHashes[53]; }
	template <> const Type* GetType<Inheritance::MultipleInheritanceClass>() { return clcppTypePtrs[54]; }
	template <> unsigned int GetTypeNameHash<Inheritance::MultipleInheritanceClass>() { return clcppTypeNameHashes[54]; }
	template <> const Type* GetType<NamespaceA::NamedNSClassA>() { return clcppTypePtrs[55]; }
	template <> unsigned int GetTypeNameHash<NamespaceA::NamedNSClassA>() { return clcppTypeNameHashes[55]; }
	template <> const Type* GetType<Offsets::VirtualInheritanceBase>() { return clcppTypePtrs[56]; }
	template <> unsigned int GetTypeNameHash<Offsets::VirtualInheritanceBase>() { return clcppTypeNameHashes[56]; }
	template <> const Type* GetType<Stuff::DerivedStruct>() { return clcppTypePtrs[57]; }
	template <> unsigned int GetTypeNameHash<Stuff::DerivedStruct>() { return clcppTypeNameHashes[57]; }
	template <> const Type* GetType<jsontest::AllFields>() { return clcppTypePtrs[58]; }
	template <> unsigned int GetTypeNameHash<jsontest::AllFields>() { return clcppTypeNameHashes[58]; }
	template <> const Type* GetType<Offsets::DoubleInPolymorphicStruct>() { return clcppTypePtrs[59]; }
	template <> unsigned int GetTypeNameHash<Offsets::DoubleInPolymorphicStruct>() { return clcppTypeNameHashes[59]; }
	template <> const Type* GetType<NamespaceA::ShouldReflect>() { return clcppTypePtrs[60]; }
	template <> unsigned int GetTypeNameHash<NamespaceA::ShouldReflect>() { return clcppTypeNameHashes[60]; }
	template <> const Type* GetType<Offsets::D>() { return clcppTypePtrs[61]; }
	template <> unsigned int GetTypeNameHash<Offsets::D>() { return clcppTypeNameHashes[61]; }
	template <> const Type* GetType<Blah2>() { return clcppTypePtrs[62]; }
	template <> unsigned int GetTypeNameHash<Blah2>() { return clcppTypeNameHashes[62]; }
	template <> const Type* GetType<TestTypedefs::Container>() { return clcppTypePtrs[63]; }
	template <> unsigned int GetTypeNameHash<TestTypedefs::Container>() { return clcppTypeNameHashes[63]; }
	template <> const Type* GetType<Offsets::VirtualInheritancePolymorphicBase>() { return clcppTypePtrs[64]; }
	template <> unsigned int GetTypeNameHash<Offsets::VirtualInheritancePolymorphicBase>() { return clcppTypeNameHashes[64]; }
	template <> const Type* GetType<Offsets::F>() { return clcppTypePtrs[65]; }
	template <> unsigned int GetTypeNameHash<Offsets::F>() { return clcppTypeNameHashes[65]; }
	template <> const Type* GetType<TestTemplates::Fields>() { return clcppTypePtrs[66]; }
	template <> unsigned int GetTypeNameHash<TestTemplates::Fields>() { return clcppTypeNameHashes[66]; }
	template <> const Type* GetType<jsontest::NoInit>() { return clcppTypePtrs[67]; }
	template <> unsigned int GetTypeNameHash<jsontest::NoInit>() { return clcppTypeNameHashes[67]; }
	template <> const Type* GetType<NamespaceB::SecondNamedNSEnum>() { return clcppTypePtrs[68]; }
	template <> unsigned int GetTypeNameHash<NamespaceB::SecondNamedNSEnum>() { return clcppTypeNameHashes[68]; }
	template <> const Type* GetType<EnumA>() { return clcppTypePtrs[69]; }
	template <> unsigned int GetTypeNameHash<EnumA>() { return clcppTypeNameHashes[69]; }
	template <> const Type* GetType<Stuff::NoInit>() { return clcppTypePtrs[70]; }
	template <> unsigned int GetTypeNameHash<Stuff::NoInit>() { return clcppTypeNameHashes[70]; }
	template <> const Type* GetType<OuterNamespace::InnerNamespace::InnerNSEnum>() { return clcppTypePtrs[71]; }
	template <> unsigned int GetTypeNameHash<OuterNamespace::InnerNamespace::InnerNSEnum>() { return clcppTypeNameHashes[71]; }
	template <> const Type* GetType<TestTemplates::ParamEnum>() { return clcppTypePtrs[72]; }
	template <> unsigned int GetTypeNameHash<TestTemplates::ParamEnum>() { return clcppTypeNameHashes[72]; }
	template <> const Type* GetType<NamedGlobalEnum>() { return clcppTypePtrs[73]; }
	template <> unsigned int GetTypeNameHash<NamedGlobalEnum>() { return clcppTypeNameHashes[73]; }
	template <> const Type* GetType<Stuff::SomeEnum>() { return clcppTypePtrs[74]; }
	template <> unsigned int GetTypeNameHash<Stuff::SomeEnum>() { return clcppTypeNameHashes[74]; }
	template <> const Type* GetType<TestAttributes::GlobalEnumAttr>() { return clcppTypePtrs[75]; }
	template <> unsigned int GetTypeNameHash<TestAttributes::GlobalEnumAttr>() { return clcppTypeNameHashes[75]; }
	template <> const Type* GetType<NamespaceF::EnumA>() { return clcppTypePtrs[76]; }
	template <> unsigned int GetTypeNameHash<NamespaceF::EnumA>() { return clcppTypeNameHashes[76]; }
	template <> const Type* GetType<NamespaceB::AnotherSecondNamedEnum>() { return clcppTypePtrs[77]; }
	template <> unsigned int GetTypeNameHash<NamespaceB::AnotherSecondNamedEnum>() { return clcppTypeNameHashes[77]; }
	template <> const Type* GetType<jsontest::Value>() { return clcppTypePtrs[78]; }
	template <> unsigned int GetTypeNameHash<jsontest::Value>() { return clcppTypeNameHashes[78]; }
	template <> const Type* GetType<NamespaceA::NamedNSEnumA>() { return clcppTypePtrs[79]; }
	template <> unsigned int GetTypeNameHash<NamespaceA::NamedNSEnumA>() { return clcppTypeNameHashes[79]; }
	template <> const Type* GetType<NamespaceA::NamedNSEnumB>() { return clcppTypePtrs[80]; }
	template <> unsigned int GetTypeNameHash<NamespaceA::NamedNSEnumB>() { return clcppTypeNameHashes[80]; }
	template <> const Type* GetType<void>() { return clcppTypePtrs[81]; }
	template <> unsigned int GetTypeNameHash<void>() { return clcppTypeNameHashes[81]; }
	template <> const Type* GetType<unsigned long>() { return clcppTypePtrs[82]; }
	template <> unsigned int GetTypeNameHash<unsigned long>() { return clcppTypeNameHashes[82]; }
	template <> const Type* GetType<wchar_t>() { return clcppTypePtrs[83]; }
	template <> unsigned int GetTypeNameHash<wchar_t>() { return clcppTypeNameHashes[83]; }
	template <> const Type* GetType<short>() { return clcppTypePtrs[84]; }
	template <> unsigned int GetTypeNameHash<short>() { return clcppTypeNameHashes[84]; }
	template <> const Type* GetType<long>() { return clcppTypePtrs[85]; }
	template <> unsigned int GetTypeNameHash<long>() { return clcppTypeNameHashes[85]; }
	template <> const Type* GetType<unsigned char>() { return clcppTypePtrs[86]; }
	template <> unsigned int GetTypeNameHash<unsigned char>() { return clcppTypeNameHashes[86]; }
	template <> const Type* GetType<long long>() { return clcppTypePtrs[87]; }
	template <> unsigned int GetTypeNameHash<long long>() { return clcppTypeNameHashes[87]; }
	template <> const Type* GetType<double>() { return clcppTypePtrs[88]; }
	template <> unsigned int GetTypeNameHash<double>() { return clcppTypeNameHashes[88]; }
	template <> const Type* GetType<bool>() { return clcppTypePtrs[89]; }
	template <> unsigned int GetTypeNameHash<bool>() { return clcppTypeNameHashes[89]; }
	template <> const Type* GetType<unsigned short>() { return clcppTypePtrs[90]; }
	template <> unsigned int GetTypeNameHash<unsigned short>() { return clcppTypeNameHashes[90]; }
	template <> const Type* GetType<unsigned int>() { return clcppTypePtrs[91]; }
	template <> unsigned int GetTypeNameHash<unsigned int>() { return clcppTypeNameHashes[91]; }
	template <> const Type* GetType<float>() { return clcppTypePtrs[92]; }
	template <> unsigned int GetTypeNameHash<float>() { return clcppTypeNameHashes[92]; }
	template <> const Type* GetType<char>() { return clcppTypePtrs[93]; }
	template <> unsigned int GetTypeNameHash<char>() { return clcppTypeNameHashes[93]; }
	template <> const Type* GetType<unsigned long long>() { return clcppTypePtrs[94]; }
	template <> unsigned int GetTypeNameHash<unsigned long long>() { return clcppTypeNameHashes[94]; }
	template <> const Type* GetType<int>() { return clcppTypePtrs[95]; }
	template <> unsigned int GetTypeNameHash<int>() { return clcppTypeNameHashes[95]; }
}
