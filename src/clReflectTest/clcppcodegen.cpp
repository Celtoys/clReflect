// 3a605340
// Generated by clmerge.exe - do not edit!
#include <clcpp/clcpp.h>

// Array of type name pointers
static const int clcppNbTypes = 127;
static const clcpp::Type* clcppTypePtrs[clcppNbTypes] = { 0 };

void clcppInitGetType(const clcpp::Database* db)
{
	// Populate the type pointer array if a database is specified
	if (db != 0)
	{
		clcppTypePtrs[0] = db->GetType(0x8779754);
		clcppTypePtrs[1] = db->GetType(0xb9bcc14);
		clcppTypePtrs[2] = db->GetType(0xd0bb24f);
		clcppTypePtrs[3] = db->GetType(0xe6b7b9c);
		clcppTypePtrs[4] = db->GetType(0x1112eb00);
		clcppTypePtrs[5] = db->GetType(0x117ff9b6);
		clcppTypePtrs[6] = db->GetType(0x122ac7cf);
		clcppTypePtrs[7] = db->GetType(0x128ebf74);
		clcppTypePtrs[8] = db->GetType(0x129358ce);
		clcppTypePtrs[9] = db->GetType(0x193e485d);
		clcppTypePtrs[10] = db->GetType(0x1c6f55c2);
		clcppTypePtrs[11] = db->GetType(0x1ec3c317);
		clcppTypePtrs[12] = db->GetType(0x1fa94273);
		clcppTypePtrs[13] = db->GetType(0x200bec8d);
		clcppTypePtrs[14] = db->GetType(0x274dd6a8);
		clcppTypePtrs[15] = db->GetType(0x28a200b3);
		clcppTypePtrs[16] = db->GetType(0x28b508b3);
		clcppTypePtrs[17] = db->GetType(0x2a1bc276);
		clcppTypePtrs[18] = db->GetType(0x2aa81423);
		clcppTypePtrs[19] = db->GetType(0x2b46a30e);
		clcppTypePtrs[20] = db->GetType(0x2bcdcfd4);
		clcppTypePtrs[21] = db->GetType(0x2bd9d03e);
		clcppTypePtrs[22] = db->GetType(0x2e9e1f59);
		clcppTypePtrs[23] = db->GetType(0x306dfb55);
		clcppTypePtrs[24] = db->GetType(0x32443fe7);
		clcppTypePtrs[25] = db->GetType(0x3a6c9e3f);
		clcppTypePtrs[26] = db->GetType(0x3c9a2a8f);
		clcppTypePtrs[27] = db->GetType(0x3e6d00ed);
		clcppTypePtrs[28] = db->GetType(0x439b314d);
		clcppTypePtrs[29] = db->GetType(0x47dab4d0);
		clcppTypePtrs[30] = db->GetType(0x4849eaf1);
		clcppTypePtrs[31] = db->GetType(0x48617e5e);
		clcppTypePtrs[32] = db->GetType(0x4cae35b9);
		clcppTypePtrs[33] = db->GetType(0x4d183461);
		clcppTypePtrs[34] = db->GetType(0x500719b7);
		clcppTypePtrs[35] = db->GetType(0x53c436fc);
		clcppTypePtrs[36] = db->GetType(0x55a81d81);
		clcppTypePtrs[37] = db->GetType(0x58b222f3);
		clcppTypePtrs[38] = db->GetType(0x58fbcb8e);
		clcppTypePtrs[39] = db->GetType(0x5960c80d);
		clcppTypePtrs[40] = db->GetType(0x5993c5ac);
		clcppTypePtrs[41] = db->GetType(0x5b12caaf);
		clcppTypePtrs[42] = db->GetType(0x5b297223);
		clcppTypePtrs[43] = db->GetType(0x5c5e4fed);
		clcppTypePtrs[44] = db->GetType(0x5e2c74ee);
		clcppTypePtrs[45] = db->GetType(0x5e48cf7e);
		clcppTypePtrs[46] = db->GetType(0x5f2e8b87);
		clcppTypePtrs[47] = db->GetType(0x5fffecc7);
		clcppTypePtrs[48] = db->GetType(0x606339c0);
		clcppTypePtrs[49] = db->GetType(0x6df382f3);
		clcppTypePtrs[50] = db->GetType(0x6ffaf3d1);
		clcppTypePtrs[51] = db->GetType(0x79596665);
		clcppTypePtrs[52] = db->GetType(0x7cf15831);
		clcppTypePtrs[53] = db->GetType(0x7d919415);
		clcppTypePtrs[54] = db->GetType(0x7dae28a6);
		clcppTypePtrs[55] = db->GetType(0x8268b4f5);
		clcppTypePtrs[56] = db->GetType(0x879ffff9);
		clcppTypePtrs[57] = db->GetType(0x90b4eaa4);
		clcppTypePtrs[58] = db->GetType(0x9239313e);
		clcppTypePtrs[59] = db->GetType(0x98bbe057);
		clcppTypePtrs[60] = db->GetType(0x9979dbb8);
		clcppTypePtrs[61] = db->GetType(0x9a3880ca);
		clcppTypePtrs[62] = db->GetType(0xa1ac1377);
		clcppTypePtrs[63] = db->GetType(0xa728fe61);
		clcppTypePtrs[64] = db->GetType(0xaa62cff5);
		clcppTypePtrs[65] = db->GetType(0xaed2af7a);
		clcppTypePtrs[66] = db->GetType(0xb094f8ca);
		clcppTypePtrs[67] = db->GetType(0xb23c6445);
		clcppTypePtrs[68] = db->GetType(0xb241b0bc);
		clcppTypePtrs[69] = db->GetType(0xb43e823a);
		clcppTypePtrs[70] = db->GetType(0xb6f19d2a);
		clcppTypePtrs[71] = db->GetType(0xb7d04294);
		clcppTypePtrs[72] = db->GetType(0xbc70ea82);
		clcppTypePtrs[73] = db->GetType(0xbd4ac0ce);
		clcppTypePtrs[74] = db->GetType(0xbed2c1df);
		clcppTypePtrs[75] = db->GetType(0xbf2b7493);
		clcppTypePtrs[76] = db->GetType(0xc172c08a);
		clcppTypePtrs[77] = db->GetType(0xc48d6fab);
		clcppTypePtrs[78] = db->GetType(0xc7e08e95);
		clcppTypePtrs[79] = db->GetType(0xcb408e5a);
		clcppTypePtrs[80] = db->GetType(0xcec33cb6);
		clcppTypePtrs[81] = db->GetType(0xd08a233b);
		clcppTypePtrs[82] = db->GetType(0xd5f68809);
		clcppTypePtrs[83] = db->GetType(0xd7d9b2da);
		clcppTypePtrs[84] = db->GetType(0xd9d63cf4);
		clcppTypePtrs[85] = db->GetType(0xdce5d7ca);
		clcppTypePtrs[86] = db->GetType(0xdd6a1817);
		clcppTypePtrs[87] = db->GetType(0xe3f51cfb);
		clcppTypePtrs[88] = db->GetType(0xe52b5d7c);
		clcppTypePtrs[89] = db->GetType(0xe7a31e7c);
		clcppTypePtrs[90] = db->GetType(0xea5fbc5c);
		clcppTypePtrs[91] = db->GetType(0xed9cb91d);
		clcppTypePtrs[92] = db->GetType(0xf3a2d31c);
		clcppTypePtrs[93] = db->GetType(0xf48810d5);
		clcppTypePtrs[94] = db->GetType(0xf488dba4);
		clcppTypePtrs[95] = db->GetType(0xfa7edbdd);
		clcppTypePtrs[96] = db->GetType(0xfdaee797);
		clcppTypePtrs[97] = db->GetType(0xfded8cf0);
		clcppTypePtrs[98] = db->GetType(0x80e9c2f);
		clcppTypePtrs[99] = db->GetType(0xcd202b4);
		clcppTypePtrs[100] = db->GetType(0xe7b9fed);
		clcppTypePtrs[101] = db->GetType(0x197dc8fa);
		clcppTypePtrs[102] = db->GetType(0x2b306cdd);
		clcppTypePtrs[103] = db->GetType(0x4da531a1);
		clcppTypePtrs[104] = db->GetType(0x66a0c9b9);
		clcppTypePtrs[105] = db->GetType(0x670073ec);
		clcppTypePtrs[106] = db->GetType(0x7fc1fd67);
		clcppTypePtrs[107] = db->GetType(0x8b4988f1);
		clcppTypePtrs[108] = db->GetType(0xc4adb08c);
		clcppTypePtrs[109] = db->GetType(0xda7ad107);
		clcppTypePtrs[110] = db->GetType(0xeb9bd0d4);
		clcppTypePtrs[111] = db->GetType(0xf8875b4f);
		clcppTypePtrs[112] = db->GetType(0x73da4a);
		clcppTypePtrs[113] = db->GetType(0x815d47a);
		clcppTypePtrs[114] = db->GetType(0x311714bf);
		clcppTypePtrs[115] = db->GetType(0x34a7768f);
		clcppTypePtrs[116] = db->GetType(0x38da33ef);
		clcppTypePtrs[117] = db->GetType(0x49400eb8);
		clcppTypePtrs[118] = db->GetType(0x532220b8);
		clcppTypePtrs[119] = db->GetType(0x68e6d3ff);
		clcppTypePtrs[120] = db->GetType(0x8fd0d24a);
		clcppTypePtrs[121] = db->GetType(0x919d1bf1);
		clcppTypePtrs[122] = db->GetType(0x91ee210a);
		clcppTypePtrs[123] = db->GetType(0x95fb9fe8);
		clcppTypePtrs[124] = db->GetType(0xb7155e0b);
		clcppTypePtrs[125] = db->GetType(0xc058aa24);
		clcppTypePtrs[126] = db->GetType(0xce831ddf);
	}
}

// Forward declarations for all known types
namespace Stuff
{
	#if defined(CLCPP_USING_MSVC)
	enum NoInit;
	enum SomeEnum;
	#endif
	struct NestedStruct;
	struct BaseStruct;
	struct DerivedStruct;
}
namespace NamespaceB
{
	#if defined(CLCPP_USING_MSVC)
	enum SecondNamedNSEnum;
	enum AnotherSecondNamedEnum;
	#endif
	struct AnotherSecondNamedNSClass;
	struct SecondNamedNSClass;
}
namespace NamespaceA
{
	#if defined(CLCPP_USING_MSVC)
	enum NamedNSEnumA;
	enum NamedNSEnumB;
	#endif
	struct NamedNSClassB;
	struct NamedNSClassA;
	class ShouldReflect;
}
namespace NamespaceF
{
	namespace NamespaceA
	{
		class ShouldReflect;
	}
	#if defined(CLCPP_USING_MSVC)
	enum EnumA;
	#endif
	class ClassA;
}
namespace clcpp
{
	struct ContainerInfo;
	struct IAllocator;
	struct Enum;
	struct PrimitiveAttribute;
	struct IWriteIterator;
	struct Type;
	struct IFile;
	struct TextAttribute;
	struct IntAttribute;
	struct Primitive;
	class WriteIterator;
	struct Field;
	struct Attribute;
	struct Function;
	class Database;
	struct Qualifier;
	struct TemplateType;
	struct Name;
	struct EnumConstant;
	struct FloatAttribute;
	struct Template;
	struct IReadIterator;
	struct FlagAttribute;
	struct Class;
	struct Namespace;
	class ReadIterator;
}
namespace jsontest
{
	#if defined(CLCPP_USING_MSVC)
	enum NoInit;
	enum Value;
	#endif
	struct BaseStruct;
	struct NestedStruct;
	struct AllFields;
}
namespace TestArrays
{
	struct S;
}
namespace TestTypedefs
{
	struct Fields;
	class AliasedType;
	struct Container;
}
namespace TestClassImpl
{
	class A;
	struct B;
}
namespace TestMissingType
{
	struct Struct;
	struct Inherit;
}
namespace Funcs
{
	struct DoubleStruct;
	struct CharStruct;
	struct Container;
	struct BigStruct;
	struct ThreeStruct;
	struct OddStruct;
	struct EmptyStruct;
}
namespace TestTemplates
{
	#if defined(CLCPP_USING_MSVC)
	enum ParamEnum;
	#endif
	struct ParamClass;
	struct ParamStruct;
	struct Fields;
}
namespace Offsets
{
	struct A;
	struct DerivedPolymorphicStruct;
	struct C;
	struct DoubleInPolymorphincStructWithPODBase;
	struct B;
	struct DoubleStructInPolymorphicStruct;
	struct PODBase;
	struct DerivedPolymorphicWithPODBase;
	struct Int64InPolymorphicStruct;
	struct K;
	struct PolymorphicStruct;
	struct H;
	struct DoubleStruct;
	struct I;
	struct J;
	struct E;
	struct VirtualInheritanceBase;
	struct DoubleInPolymorphicStruct;
	struct D;
	struct VirtualInheritancePolymorphicBase;
	struct F;
}
namespace OuterNamespace
{
	namespace InnerNamespace
	{
		#if defined(CLCPP_USING_MSVC)
		enum InnerNSEnum;
		#endif
		struct OuterClass;
	}
}
namespace clutl
{
	class JSONContext;
	struct Object;
	class WriteBuffer;
	class ReadBuffer;
}
namespace Inheritance
{
	struct DerivedClass;
	struct ErrorClass;
	struct BaseClass;
	struct MultipleInheritanceClass;
}
namespace TestCollections
{
	struct Struct;
}
namespace TestAttributes
{
	#if defined(CLCPP_USING_MSVC)
	enum GlobalEnumAttr;
	#endif
	class ClassAttr;
	struct StructAttr;
}
#if defined(CLCPP_USING_MSVC)
enum EnumA;
enum NamedGlobalEnum;
#endif
struct FirstType;
class ClassA;
struct ThirdType;
struct StructGlobalA;
struct SecondType;
class FieldTypes;
class ClassGlobalA;
struct Blah2;

// Specialisations for GetType and GetTypeNameHash
namespace clcpp
{
	template <> const Type* GetType< Offsets::A >() { return clcppTypePtrs[0]; }
	template <> unsigned int GetTypeNameHash< Offsets::A >() { return 0x8779754; }
	template <> const Type* GetType< clcpp::ContainerInfo >() { return clcppTypePtrs[1]; }
	template <> unsigned int GetTypeNameHash< clcpp::ContainerInfo >() { return 0xb9bcc14; }
	template <> const Type* GetType< TestMissingType::Struct >() { return clcppTypePtrs[2]; }
	template <> unsigned int GetTypeNameHash< TestMissingType::Struct >() { return 0xd0bb24f; }
	template <> const Type* GetType< ::FirstType >() { return clcppTypePtrs[3]; }
	template <> unsigned int GetTypeNameHash< ::FirstType >() { return 0xe6b7b9c; }
	template <> const Type* GetType< jsontest::BaseStruct >() { return clcppTypePtrs[4]; }
	template <> unsigned int GetTypeNameHash< jsontest::BaseStruct >() { return 0x1112eb00; }
	template <> const Type* GetType< Offsets::DerivedPolymorphicStruct >() { return clcppTypePtrs[5]; }
	template <> unsigned int GetTypeNameHash< Offsets::DerivedPolymorphicStruct >() { return 0x117ff9b6; }
	template <> const Type* GetType< TestTemplates::ParamClass >() { return clcppTypePtrs[6]; }
	template <> unsigned int GetTypeNameHash< TestTemplates::ParamClass >() { return 0x122ac7cf; }
	template <> const Type* GetType< TestClassImpl::A >() { return clcppTypePtrs[7]; }
	template <> unsigned int GetTypeNameHash< TestClassImpl::A >() { return 0x128ebf74; }
	template <> const Type* GetType< Offsets::C >() { return clcppTypePtrs[8]; }
	template <> unsigned int GetTypeNameHash< Offsets::C >() { return 0x129358ce; }
	template <> const Type* GetType< Funcs::DoubleStruct >() { return clcppTypePtrs[9]; }
	template <> unsigned int GetTypeNameHash< Funcs::DoubleStruct >() { return 0x193e485d; }
	template <> const Type* GetType< ::ClassA >() { return clcppTypePtrs[10]; }
	template <> unsigned int GetTypeNameHash< ::ClassA >() { return 0x1c6f55c2; }
	template <> const Type* GetType< TestTypedefs::Fields >() { return clcppTypePtrs[11]; }
	template <> unsigned int GetTypeNameHash< TestTypedefs::Fields >() { return 0x1ec3c317; }
	template <> const Type* GetType< Offsets::DoubleInPolymorphincStructWithPODBase >() { return clcppTypePtrs[12]; }
	template <> unsigned int GetTypeNameHash< Offsets::DoubleInPolymorphincStructWithPODBase >() { return 0x1fa94273; }
	template <> const Type* GetType< Offsets::B >() { return clcppTypePtrs[13]; }
	template <> unsigned int GetTypeNameHash< Offsets::B >() { return 0x200bec8d; }
	template <> const Type* GetType< clcpp::IAllocator >() { return clcppTypePtrs[14]; }
	template <> unsigned int GetTypeNameHash< clcpp::IAllocator >() { return 0x274dd6a8; }
	template <> const Type* GetType< TestCollections::Struct >() { return clcppTypePtrs[15]; }
	template <> unsigned int GetTypeNameHash< TestCollections::Struct >() { return 0x28a200b3; }
	template <> const Type* GetType< NamespaceF::ClassA >() { return clcppTypePtrs[16]; }
	template <> unsigned int GetTypeNameHash< NamespaceF::ClassA >() { return 0x28b508b3; }
	template <> const Type* GetType< NamespaceF::NamespaceA::ShouldReflect >() { return clcppTypePtrs[17]; }
	template <> unsigned int GetTypeNameHash< NamespaceF::NamespaceA::ShouldReflect >() { return 0x2a1bc276; }
	template <> const Type* GetType< Funcs::CharStruct >() { return clcppTypePtrs[18]; }
	template <> unsigned int GetTypeNameHash< Funcs::CharStruct >() { return 0x2aa81423; }
	template <> const Type* GetType< clcpp::Enum >() { return clcppTypePtrs[19]; }
	template <> unsigned int GetTypeNameHash< clcpp::Enum >() { return 0x2b46a30e; }
	template <> const Type* GetType< TestTypedefs::AliasedType >() { return clcppTypePtrs[20]; }
	template <> unsigned int GetTypeNameHash< TestTypedefs::AliasedType >() { return 0x2bcdcfd4; }
	template <> const Type* GetType< Offsets::DoubleStructInPolymorphicStruct >() { return clcppTypePtrs[21]; }
	template <> unsigned int GetTypeNameHash< Offsets::DoubleStructInPolymorphicStruct >() { return 0x2bd9d03e; }
	template <> const Type* GetType< clcpp::PrimitiveAttribute >() { return clcppTypePtrs[22]; }
	template <> unsigned int GetTypeNameHash< clcpp::PrimitiveAttribute >() { return 0x2e9e1f59; }
	template <> const Type* GetType< NamespaceA::NamedNSClassB >() { return clcppTypePtrs[23]; }
	template <> unsigned int GetTypeNameHash< NamespaceA::NamedNSClassB >() { return 0x306dfb55; }
	template <> const Type* GetType< clcpp::IWriteIterator >() { return clcppTypePtrs[24]; }
	template <> unsigned int GetTypeNameHash< clcpp::IWriteIterator >() { return 0x32443fe7; }
	template <> const Type* GetType< clcpp::Type >() { return clcppTypePtrs[25]; }
	template <> unsigned int GetTypeNameHash< clcpp::Type >() { return 0x3a6c9e3f; }
	template <> const Type* GetType< clcpp::IFile >() { return clcppTypePtrs[26]; }
	template <> unsigned int GetTypeNameHash< clcpp::IFile >() { return 0x3c9a2a8f; }
	template <> const Type* GetType< clcpp::TextAttribute >() { return clcppTypePtrs[27]; }
	template <> unsigned int GetTypeNameHash< clcpp::TextAttribute >() { return 0x3e6d00ed; }
	template <> const Type* GetType< clcpp::IntAttribute >() { return clcppTypePtrs[28]; }
	template <> unsigned int GetTypeNameHash< clcpp::IntAttribute >() { return 0x439b314d; }
	template <> const Type* GetType< clcpp::Primitive >() { return clcppTypePtrs[29]; }
	template <> unsigned int GetTypeNameHash< clcpp::Primitive >() { return 0x47dab4d0; }
	template <> const Type* GetType< Funcs::Container >() { return clcppTypePtrs[30]; }
	template <> unsigned int GetTypeNameHash< Funcs::Container >() { return 0x4849eaf1; }
	template <> const Type* GetType< Offsets::PODBase >() { return clcppTypePtrs[31]; }
	template <> unsigned int GetTypeNameHash< Offsets::PODBase >() { return 0x48617e5e; }
	template <> const Type* GetType< clcpp::WriteIterator >() { return clcppTypePtrs[32]; }
	template <> unsigned int GetTypeNameHash< clcpp::WriteIterator >() { return 0x4cae35b9; }
	template <> const Type* GetType< jsontest::NestedStruct >() { return clcppTypePtrs[33]; }
	template <> unsigned int GetTypeNameHash< jsontest::NestedStruct >() { return 0x4d183461; }
	template <> const Type* GetType< clcpp::Field >() { return clcppTypePtrs[34]; }
	template <> unsigned int GetTypeNameHash< clcpp::Field >() { return 0x500719b7; }
	template <> const Type* GetType< Funcs::BigStruct >() { return clcppTypePtrs[35]; }
	template <> unsigned int GetTypeNameHash< Funcs::BigStruct >() { return 0x53c436fc; }
	template <> const Type* GetType< clcpp::Attribute >() { return clcppTypePtrs[36]; }
	template <> unsigned int GetTypeNameHash< clcpp::Attribute >() { return 0x55a81d81; }
	template <> const Type* GetType< Offsets::DerivedPolymorphicWithPODBase >() { return clcppTypePtrs[37]; }
	template <> unsigned int GetTypeNameHash< Offsets::DerivedPolymorphicWithPODBase >() { return 0x58b222f3; }
	template <> const Type* GetType< clcpp::Function >() { return clcppTypePtrs[38]; }
	template <> unsigned int GetTypeNameHash< clcpp::Function >() { return 0x58fbcb8e; }
	template <> const Type* GetType< clcpp::Database >() { return clcppTypePtrs[39]; }
	template <> unsigned int GetTypeNameHash< clcpp::Database >() { return 0x5960c80d; }
	template <> const Type* GetType< ::ThirdType >() { return clcppTypePtrs[40]; }
	template <> unsigned int GetTypeNameHash< ::ThirdType >() { return 0x5993c5ac; }
	template <> const Type* GetType< NamespaceB::AnotherSecondNamedNSClass >() { return clcppTypePtrs[41]; }
	template <> unsigned int GetTypeNameHash< NamespaceB::AnotherSecondNamedNSClass >() { return 0x5b12caaf; }
	template <> const Type* GetType< NamespaceB::SecondNamedNSClass >() { return clcppTypePtrs[42]; }
	template <> unsigned int GetTypeNameHash< NamespaceB::SecondNamedNSClass >() { return 0x5b297223; }
	template <> const Type* GetType< Offsets::Int64InPolymorphicStruct >() { return clcppTypePtrs[43]; }
	template <> unsigned int GetTypeNameHash< Offsets::Int64InPolymorphicStruct >() { return 0x5c5e4fed; }
	template <> const Type* GetType< clcpp::Qualifier >() { return clcppTypePtrs[44]; }
	template <> unsigned int GetTypeNameHash< clcpp::Qualifier >() { return 0x5e2c74ee; }
	template <> const Type* GetType< TestClassImpl::B >() { return clcppTypePtrs[45]; }
	template <> unsigned int GetTypeNameHash< TestClassImpl::B >() { return 0x5e48cf7e; }
	template <> const Type* GetType< TestTemplates::ParamStruct >() { return clcppTypePtrs[46]; }
	template <> unsigned int GetTypeNameHash< TestTemplates::ParamStruct >() { return 0x5f2e8b87; }
	template <> const Type* GetType< Stuff::NestedStruct >() { return clcppTypePtrs[47]; }
	template <> unsigned int GetTypeNameHash< Stuff::NestedStruct >() { return 0x5fffecc7; }
	template <> const Type* GetType< Inheritance::DerivedClass >() { return clcppTypePtrs[48]; }
	template <> unsigned int GetTypeNameHash< Inheritance::DerivedClass >() { return 0x606339c0; }
	template <> const Type* GetType< clcpp::TemplateType >() { return clcppTypePtrs[49]; }
	template <> unsigned int GetTypeNameHash< clcpp::TemplateType >() { return 0x6df382f3; }
	template <> const Type* GetType< OuterNamespace::InnerNamespace::OuterClass >() { return clcppTypePtrs[50]; }
	template <> unsigned int GetTypeNameHash< OuterNamespace::InnerNamespace::OuterClass >() { return 0x6ffaf3d1; }
	template <> const Type* GetType< ::StructGlobalA >() { return clcppTypePtrs[51]; }
	template <> unsigned int GetTypeNameHash< ::StructGlobalA >() { return 0x79596665; }
	template <> const Type* GetType< Funcs::ThreeStruct >() { return clcppTypePtrs[52]; }
	template <> unsigned int GetTypeNameHash< Funcs::ThreeStruct >() { return 0x7cf15831; }
	template <> const Type* GetType< Offsets::K >() { return clcppTypePtrs[53]; }
	template <> unsigned int GetTypeNameHash< Offsets::K >() { return 0x7d919415; }
	template <> const Type* GetType< TestAttributes::ClassAttr >() { return clcppTypePtrs[54]; }
	template <> unsigned int GetTypeNameHash< TestAttributes::ClassAttr >() { return 0x7dae28a6; }
	template <> const Type* GetType< Offsets::PolymorphicStruct >() { return clcppTypePtrs[55]; }
	template <> unsigned int GetTypeNameHash< Offsets::PolymorphicStruct >() { return 0x8268b4f5; }
	template <> const Type* GetType< TestArrays::S >() { return clcppTypePtrs[56]; }
	template <> unsigned int GetTypeNameHash< TestArrays::S >() { return 0x879ffff9; }
	template <> const Type* GetType< ::SecondType >() { return clcppTypePtrs[57]; }
	template <> unsigned int GetTypeNameHash< ::SecondType >() { return 0x90b4eaa4; }
	template <> const Type* GetType< TestAttributes::StructAttr >() { return clcppTypePtrs[58]; }
	template <> unsigned int GetTypeNameHash< TestAttributes::StructAttr >() { return 0x9239313e; }
	template <> const Type* GetType< Inheritance::ErrorClass >() { return clcppTypePtrs[59]; }
	template <> unsigned int GetTypeNameHash< Inheritance::ErrorClass >() { return 0x98bbe057; }
	template <> const Type* GetType< clcpp::Name >() { return clcppTypePtrs[60]; }
	template <> unsigned int GetTypeNameHash< clcpp::Name >() { return 0x9979dbb8; }
	template <> const Type* GetType< clcpp::EnumConstant >() { return clcppTypePtrs[61]; }
	template <> unsigned int GetTypeNameHash< clcpp::EnumConstant >() { return 0x9a3880ca; }
	template <> const Type* GetType< Inheritance::BaseClass >() { return clcppTypePtrs[62]; }
	template <> unsigned int GetTypeNameHash< Inheritance::BaseClass >() { return 0xa1ac1377; }
	template <> const Type* GetType< clutl::JSONContext >() { return clcppTypePtrs[63]; }
	template <> unsigned int GetTypeNameHash< clutl::JSONContext >() { return 0xa728fe61; }
	template <> const Type* GetType< Offsets::H >() { return clcppTypePtrs[64]; }
	template <> unsigned int GetTypeNameHash< Offsets::H >() { return 0xaa62cff5; }
	template <> const Type* GetType< clcpp::FloatAttribute >() { return clcppTypePtrs[65]; }
	template <> unsigned int GetTypeNameHash< clcpp::FloatAttribute >() { return 0xaed2af7a; }
	template <> const Type* GetType< Offsets::DoubleStruct >() { return clcppTypePtrs[66]; }
	template <> unsigned int GetTypeNameHash< Offsets::DoubleStruct >() { return 0xb094f8ca; }
	template <> const Type* GetType< ::FieldTypes >() { return clcppTypePtrs[67]; }
	template <> unsigned int GetTypeNameHash< ::FieldTypes >() { return 0xb23c6445; }
	template <> const Type* GetType< clutl::Object >() { return clcppTypePtrs[68]; }
	template <> unsigned int GetTypeNameHash< clutl::Object >() { return 0xb241b0bc; }
	template <> const Type* GetType< Funcs::OddStruct >() { return clcppTypePtrs[69]; }
	template <> unsigned int GetTypeNameHash< Funcs::OddStruct >() { return 0xb43e823a; }
	template <> const Type* GetType< Stuff::BaseStruct >() { return clcppTypePtrs[70]; }
	template <> unsigned int GetTypeNameHash< Stuff::BaseStruct >() { return 0xb6f19d2a; }
	template <> const Type* GetType< TestMissingType::Inherit >() { return clcppTypePtrs[71]; }
	template <> unsigned int GetTypeNameHash< TestMissingType::Inherit >() { return 0xb7d04294; }
	template <> const Type* GetType< Offsets::I >() { return clcppTypePtrs[72]; }
	template <> unsigned int GetTypeNameHash< Offsets::I >() { return 0xbc70ea82; }
	template <> const Type* GetType< ::ClassGlobalA >() { return clcppTypePtrs[73]; }
	template <> unsigned int GetTypeNameHash< ::ClassGlobalA >() { return 0xbd4ac0ce; }
	template <> const Type* GetType< Offsets::J >() { return clcppTypePtrs[74]; }
	template <> unsigned int GetTypeNameHash< Offsets::J >() { return 0xbed2c1df; }
	template <> const Type* GetType< clcpp::Template >() { return clcppTypePtrs[75]; }
	template <> unsigned int GetTypeNameHash< clcpp::Template >() { return 0xbf2b7493; }
	template <> const Type* GetType< clutl::WriteBuffer >() { return clcppTypePtrs[76]; }
	template <> unsigned int GetTypeNameHash< clutl::WriteBuffer >() { return 0xc172c08a; }
	template <> const Type* GetType< Offsets::E >() { return clcppTypePtrs[77]; }
	template <> unsigned int GetTypeNameHash< Offsets::E >() { return 0xc48d6fab; }
	template <> const Type* GetType< Funcs::EmptyStruct >() { return clcppTypePtrs[78]; }
	template <> unsigned int GetTypeNameHash< Funcs::EmptyStruct >() { return 0xc7e08e95; }
	template <> const Type* GetType< clcpp::IReadIterator >() { return clcppTypePtrs[79]; }
	template <> unsigned int GetTypeNameHash< clcpp::IReadIterator >() { return 0xcb408e5a; }
	template <> const Type* GetType< Inheritance::MultipleInheritanceClass >() { return clcppTypePtrs[80]; }
	template <> unsigned int GetTypeNameHash< Inheritance::MultipleInheritanceClass >() { return 0xcec33cb6; }
	template <> const Type* GetType< NamespaceA::NamedNSClassA >() { return clcppTypePtrs[81]; }
	template <> unsigned int GetTypeNameHash< NamespaceA::NamedNSClassA >() { return 0xd08a233b; }
	template <> const Type* GetType< clutl::ReadBuffer >() { return clcppTypePtrs[82]; }
	template <> unsigned int GetTypeNameHash< clutl::ReadBuffer >() { return 0xd5f68809; }
	template <> const Type* GetType< Offsets::VirtualInheritanceBase >() { return clcppTypePtrs[83]; }
	template <> unsigned int GetTypeNameHash< Offsets::VirtualInheritanceBase >() { return 0xd7d9b2da; }
	template <> const Type* GetType< Stuff::DerivedStruct >() { return clcppTypePtrs[84]; }
	template <> unsigned int GetTypeNameHash< Stuff::DerivedStruct >() { return 0xd9d63cf4; }
	template <> const Type* GetType< jsontest::AllFields >() { return clcppTypePtrs[85]; }
	template <> unsigned int GetTypeNameHash< jsontest::AllFields >() { return 0xdce5d7ca; }
	template <> const Type* GetType< Offsets::DoubleInPolymorphicStruct >() { return clcppTypePtrs[86]; }
	template <> unsigned int GetTypeNameHash< Offsets::DoubleInPolymorphicStruct >() { return 0xdd6a1817; }
	template <> const Type* GetType< NamespaceA::ShouldReflect >() { return clcppTypePtrs[87]; }
	template <> unsigned int GetTypeNameHash< NamespaceA::ShouldReflect >() { return 0xe3f51cfb; }
	template <> const Type* GetType< Offsets::D >() { return clcppTypePtrs[88]; }
	template <> unsigned int GetTypeNameHash< Offsets::D >() { return 0xe52b5d7c; }
	template <> const Type* GetType< clcpp::FlagAttribute >() { return clcppTypePtrs[89]; }
	template <> unsigned int GetTypeNameHash< clcpp::FlagAttribute >() { return 0xe7a31e7c; }
	template <> const Type* GetType< ::Blah2 >() { return clcppTypePtrs[90]; }
	template <> unsigned int GetTypeNameHash< ::Blah2 >() { return 0xea5fbc5c; }
	template <> const Type* GetType< TestTypedefs::Container >() { return clcppTypePtrs[91]; }
	template <> unsigned int GetTypeNameHash< TestTypedefs::Container >() { return 0xed9cb91d; }
	template <> const Type* GetType< clcpp::Class >() { return clcppTypePtrs[92]; }
	template <> unsigned int GetTypeNameHash< clcpp::Class >() { return 0xf3a2d31c; }
	template <> const Type* GetType< Offsets::VirtualInheritancePolymorphicBase >() { return clcppTypePtrs[93]; }
	template <> unsigned int GetTypeNameHash< Offsets::VirtualInheritancePolymorphicBase >() { return 0xf48810d5; }
	template <> const Type* GetType< clcpp::Namespace >() { return clcppTypePtrs[94]; }
	template <> unsigned int GetTypeNameHash< clcpp::Namespace >() { return 0xf488dba4; }
	template <> const Type* GetType< clcpp::ReadIterator >() { return clcppTypePtrs[95]; }
	template <> unsigned int GetTypeNameHash< clcpp::ReadIterator >() { return 0xfa7edbdd; }
	template <> const Type* GetType< Offsets::F >() { return clcppTypePtrs[96]; }
	template <> unsigned int GetTypeNameHash< Offsets::F >() { return 0xfdaee797; }
	template <> const Type* GetType< TestTemplates::Fields >() { return clcppTypePtrs[97]; }
	template <> unsigned int GetTypeNameHash< TestTemplates::Fields >() { return 0xfded8cf0; }
	template <> const Type* GetType< void >() { return clcppTypePtrs[112]; }
	template <> unsigned int GetTypeNameHash< void >() { return 0x73da4a; }
	template <> const Type* GetType< unsigned long >() { return clcppTypePtrs[113]; }
	template <> unsigned int GetTypeNameHash< unsigned long >() { return 0x815d47a; }
	template <> const Type* GetType< wchar_t >() { return clcppTypePtrs[114]; }
	template <> unsigned int GetTypeNameHash< wchar_t >() { return 0x311714bf; }
	template <> const Type* GetType< short >() { return clcppTypePtrs[115]; }
	template <> unsigned int GetTypeNameHash< short >() { return 0x34a7768f; }
	template <> const Type* GetType< long >() { return clcppTypePtrs[116]; }
	template <> unsigned int GetTypeNameHash< long >() { return 0x38da33ef; }
	template <> const Type* GetType< unsigned char >() { return clcppTypePtrs[117]; }
	template <> unsigned int GetTypeNameHash< unsigned char >() { return 0x49400eb8; }
	template <> const Type* GetType< long long >() { return clcppTypePtrs[118]; }
	template <> unsigned int GetTypeNameHash< long long >() { return 0x532220b8; }
	template <> const Type* GetType< double >() { return clcppTypePtrs[119]; }
	template <> unsigned int GetTypeNameHash< double >() { return 0x68e6d3ff; }
	template <> const Type* GetType< bool >() { return clcppTypePtrs[120]; }
	template <> unsigned int GetTypeNameHash< bool >() { return 0x8fd0d24a; }
	template <> const Type* GetType< unsigned short >() { return clcppTypePtrs[121]; }
	template <> unsigned int GetTypeNameHash< unsigned short >() { return 0x919d1bf1; }
	template <> const Type* GetType< unsigned int >() { return clcppTypePtrs[122]; }
	template <> unsigned int GetTypeNameHash< unsigned int >() { return 0x91ee210a; }
	template <> const Type* GetType< float >() { return clcppTypePtrs[123]; }
	template <> unsigned int GetTypeNameHash< float >() { return 0x95fb9fe8; }
	template <> const Type* GetType< char >() { return clcppTypePtrs[124]; }
	template <> unsigned int GetTypeNameHash< char >() { return 0xb7155e0b; }
	template <> const Type* GetType< unsigned long long >() { return clcppTypePtrs[125]; }
	template <> unsigned int GetTypeNameHash< unsigned long long >() { return 0xc058aa24; }
	template <> const Type* GetType< int >() { return clcppTypePtrs[126]; }
	template <> unsigned int GetTypeNameHash< int >() { return 0xce831ddf; }
	#if defined(CLCPP_USING_MSVC)
	template <> const Type* GetType< jsontest::NoInit >() { return clcppTypePtrs[98]; }
	template <> unsigned int GetTypeNameHash< jsontest::NoInit >() { return 0x80e9c2f; }
	template <> const Type* GetType< NamespaceB::SecondNamedNSEnum >() { return clcppTypePtrs[99]; }
	template <> unsigned int GetTypeNameHash< NamespaceB::SecondNamedNSEnum >() { return 0xcd202b4; }
	template <> const Type* GetType< ::EnumA >() { return clcppTypePtrs[100]; }
	template <> unsigned int GetTypeNameHash< ::EnumA >() { return 0xe7b9fed; }
	template <> const Type* GetType< Stuff::NoInit >() { return clcppTypePtrs[101]; }
	template <> unsigned int GetTypeNameHash< Stuff::NoInit >() { return 0x197dc8fa; }
	template <> const Type* GetType< OuterNamespace::InnerNamespace::InnerNSEnum >() { return clcppTypePtrs[102]; }
	template <> unsigned int GetTypeNameHash< OuterNamespace::InnerNamespace::InnerNSEnum >() { return 0x2b306cdd; }
	template <> const Type* GetType< TestTemplates::ParamEnum >() { return clcppTypePtrs[103]; }
	template <> unsigned int GetTypeNameHash< TestTemplates::ParamEnum >() { return 0x4da531a1; }
	template <> const Type* GetType< ::NamedGlobalEnum >() { return clcppTypePtrs[104]; }
	template <> unsigned int GetTypeNameHash< ::NamedGlobalEnum >() { return 0x66a0c9b9; }
	template <> const Type* GetType< Stuff::SomeEnum >() { return clcppTypePtrs[105]; }
	template <> unsigned int GetTypeNameHash< Stuff::SomeEnum >() { return 0x670073ec; }
	template <> const Type* GetType< TestAttributes::GlobalEnumAttr >() { return clcppTypePtrs[106]; }
	template <> unsigned int GetTypeNameHash< TestAttributes::GlobalEnumAttr >() { return 0x7fc1fd67; }
	template <> const Type* GetType< NamespaceF::EnumA >() { return clcppTypePtrs[107]; }
	template <> unsigned int GetTypeNameHash< NamespaceF::EnumA >() { return 0x8b4988f1; }
	template <> const Type* GetType< NamespaceB::AnotherSecondNamedEnum >() { return clcppTypePtrs[108]; }
	template <> unsigned int GetTypeNameHash< NamespaceB::AnotherSecondNamedEnum >() { return 0xc4adb08c; }
	template <> const Type* GetType< jsontest::Value >() { return clcppTypePtrs[109]; }
	template <> unsigned int GetTypeNameHash< jsontest::Value >() { return 0xda7ad107; }
	template <> const Type* GetType< NamespaceA::NamedNSEnumA >() { return clcppTypePtrs[110]; }
	template <> unsigned int GetTypeNameHash< NamespaceA::NamedNSEnumA >() { return 0xeb9bd0d4; }
	template <> const Type* GetType< NamespaceA::NamedNSEnumB >() { return clcppTypePtrs[111]; }
	template <> unsigned int GetTypeNameHash< NamespaceA::NamedNSEnumB >() { return 0xf8875b4f; }
	#endif
}
