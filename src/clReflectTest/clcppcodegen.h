// 75c231dd
// Generated by clmerge.exe - do not edit!
#include <clcpp/clcpp.h>

// Forward declarations for all known types
namespace Stuff
{
	#if defined(CLCPP_USING_MSVC)
	enum NoInit;
	enum SomeEnum;
	#endif
	struct NestedStruct;
	struct BaseStruct;
	struct DerivedStruct;
}
namespace NamespaceB
{
	#if defined(CLCPP_USING_MSVC)
	enum SecondNamedNSEnum;
	enum AnotherSecondNamedEnum;
	#endif
	struct AnotherSecondNamedNSClass;
	struct SecondNamedNSClass;
}
namespace NamespaceA
{
	#if defined(CLCPP_USING_MSVC)
	enum NamedNSEnumA;
	enum NamedNSEnumB;
	#endif
	struct NamedNSClassB;
	struct NamedNSClassA;
	class ShouldReflect;
}
namespace NamespaceF
{
	namespace NamespaceA
	{
		class ShouldReflect;
	}
	#if defined(CLCPP_USING_MSVC)
	enum EnumA;
	#endif
	class ClassA;
}
namespace clcpp
{
	struct ContainerInfo;
	struct IAllocator;
	struct Enum;
	struct PrimitiveAttribute;
	struct IWriteIterator;
	struct Type;
	struct IFile;
	struct TextAttribute;
	struct IntAttribute;
	struct Primitive;
	class WriteIterator;
	struct Field;
	struct Attribute;
	struct Function;
	class Database;
	struct Qualifier;
	struct TemplateType;
	struct Name;
	struct EnumConstant;
	struct FloatAttribute;
	struct Template;
	struct IReadIterator;
	struct FlagAttribute;
	struct Class;
	struct Namespace;
	class ReadIterator;
}
namespace jsontest
{
	#if defined(CLCPP_USING_MSVC)
	enum NoInit;
	enum Value;
	#endif
	struct BaseStruct;
	struct NestedStruct;
	struct AllFields;
}
namespace TestArrays
{
	struct S;
}
namespace TestTypedefs
{
	struct Fields;
	class AliasedType;
	struct Container;
}
namespace TestClassImpl
{
	class A;
	struct B;
}
namespace TestMissingType
{
	struct Struct;
	struct Inherit;
}
namespace Funcs
{
	struct DoubleStruct;
	struct CharStruct;
	struct Container;
	struct BigStruct;
	struct ThreeStruct;
	struct OddStruct;
	struct EmptyStruct;
}
namespace TestTemplates
{
	#if defined(CLCPP_USING_MSVC)
	enum ParamEnum;
	#endif
	struct ParamClass;
	struct ParamStruct;
	struct Fields;
}
namespace Offsets
{
	struct A;
	struct DerivedPolymorphicStruct;
	struct C;
	struct DoubleInPolymorphincStructWithPODBase;
	struct B;
	struct DoubleStructInPolymorphicStruct;
	struct PODBase;
	struct DerivedPolymorphicWithPODBase;
	struct Int64InPolymorphicStruct;
	struct K;
	struct PolymorphicStruct;
	struct H;
	struct DoubleStruct;
	struct I;
	struct J;
	struct E;
	struct VirtualInheritanceBase;
	struct DoubleInPolymorphicStruct;
	struct D;
	struct VirtualInheritancePolymorphicBase;
	struct F;
}
namespace OuterNamespace
{
	namespace InnerNamespace
	{
		#if defined(CLCPP_USING_MSVC)
		enum InnerNSEnum;
		#endif
		struct OuterClass;
	}
}
namespace clutl
{
	class JSONContext;
	struct Object;
	class WriteBuffer;
	class ReadBuffer;
}
namespace Inheritance
{
	struct DerivedClass;
	struct ErrorClass;
	struct BaseClass;
	struct MultipleInheritanceClass;
}
namespace TestCollections
{
	struct Struct;
}
namespace TestAttributes
{
	#if defined(CLCPP_USING_MSVC)
	enum GlobalEnumAttr;
	#endif
	class ClassAttr;
	struct StructAttr;
}
#if defined(CLCPP_USING_MSVC)
enum EnumA;
enum NamedGlobalEnum;
#endif
struct FirstType;
class ClassA;
struct ThirdType;
struct StructGlobalA;
struct SecondType;
class FieldTypes;
class ClassGlobalA;
struct Blah2;
enum class ScopedEnum;

// Specialisations for constexpr clcppTypeHash
template <> constexpr unsigned int clcppTypeHash< Offsets::A >() { return 0x8779754; }
template <> constexpr unsigned int clcppTypeHash< clcpp::ContainerInfo >() { return 0xb9bcc14; }
template <> constexpr unsigned int clcppTypeHash< TestMissingType::Struct >() { return 0xd0bb24f; }
template <> constexpr unsigned int clcppTypeHash< ::FirstType >() { return 0xe6b7b9c; }
template <> constexpr unsigned int clcppTypeHash< jsontest::BaseStruct >() { return 0x1112eb00; }
template <> constexpr unsigned int clcppTypeHash< Offsets::DerivedPolymorphicStruct >() { return 0x117ff9b6; }
template <> constexpr unsigned int clcppTypeHash< TestTemplates::ParamClass >() { return 0x122ac7cf; }
template <> constexpr unsigned int clcppTypeHash< TestClassImpl::A >() { return 0x128ebf74; }
template <> constexpr unsigned int clcppTypeHash< Offsets::C >() { return 0x129358ce; }
template <> constexpr unsigned int clcppTypeHash< Funcs::DoubleStruct >() { return 0x193e485d; }
template <> constexpr unsigned int clcppTypeHash< ::ClassA >() { return 0x1c6f55c2; }
template <> constexpr unsigned int clcppTypeHash< TestTypedefs::Fields >() { return 0x1ec3c317; }
template <> constexpr unsigned int clcppTypeHash< Offsets::DoubleInPolymorphincStructWithPODBase >() { return 0x1fa94273; }
template <> constexpr unsigned int clcppTypeHash< Offsets::B >() { return 0x200bec8d; }
template <> constexpr unsigned int clcppTypeHash< clcpp::IAllocator >() { return 0x274dd6a8; }
template <> constexpr unsigned int clcppTypeHash< TestCollections::Struct >() { return 0x28a200b3; }
template <> constexpr unsigned int clcppTypeHash< NamespaceF::ClassA >() { return 0x28b508b3; }
template <> constexpr unsigned int clcppTypeHash< NamespaceF::NamespaceA::ShouldReflect >() { return 0x2a1bc276; }
template <> constexpr unsigned int clcppTypeHash< Funcs::CharStruct >() { return 0x2aa81423; }
template <> constexpr unsigned int clcppTypeHash< clcpp::Enum >() { return 0x2b46a30e; }
template <> constexpr unsigned int clcppTypeHash< TestTypedefs::AliasedType >() { return 0x2bcdcfd4; }
template <> constexpr unsigned int clcppTypeHash< Offsets::DoubleStructInPolymorphicStruct >() { return 0x2bd9d03e; }
template <> constexpr unsigned int clcppTypeHash< clcpp::PrimitiveAttribute >() { return 0x2e9e1f59; }
template <> constexpr unsigned int clcppTypeHash< NamespaceA::NamedNSClassB >() { return 0x306dfb55; }
template <> constexpr unsigned int clcppTypeHash< clcpp::IWriteIterator >() { return 0x32443fe7; }
template <> constexpr unsigned int clcppTypeHash< clcpp::Type >() { return 0x3a6c9e3f; }
template <> constexpr unsigned int clcppTypeHash< clcpp::IFile >() { return 0x3c9a2a8f; }
template <> constexpr unsigned int clcppTypeHash< clcpp::TextAttribute >() { return 0x3e6d00ed; }
template <> constexpr unsigned int clcppTypeHash< clcpp::IntAttribute >() { return 0x439b314d; }
template <> constexpr unsigned int clcppTypeHash< clcpp::Primitive >() { return 0x47dab4d0; }
template <> constexpr unsigned int clcppTypeHash< Funcs::Container >() { return 0x4849eaf1; }
template <> constexpr unsigned int clcppTypeHash< Offsets::PODBase >() { return 0x48617e5e; }
template <> constexpr unsigned int clcppTypeHash< clcpp::WriteIterator >() { return 0x4cae35b9; }
template <> constexpr unsigned int clcppTypeHash< jsontest::NestedStruct >() { return 0x4d183461; }
template <> constexpr unsigned int clcppTypeHash< clcpp::Field >() { return 0x500719b7; }
template <> constexpr unsigned int clcppTypeHash< Funcs::BigStruct >() { return 0x53c436fc; }
template <> constexpr unsigned int clcppTypeHash< clcpp::Attribute >() { return 0x55a81d81; }
template <> constexpr unsigned int clcppTypeHash< Offsets::DerivedPolymorphicWithPODBase >() { return 0x58b222f3; }
template <> constexpr unsigned int clcppTypeHash< clcpp::Function >() { return 0x58fbcb8e; }
template <> constexpr unsigned int clcppTypeHash< clcpp::Database >() { return 0x5960c80d; }
template <> constexpr unsigned int clcppTypeHash< ::ThirdType >() { return 0x5993c5ac; }
template <> constexpr unsigned int clcppTypeHash< NamespaceB::AnotherSecondNamedNSClass >() { return 0x5b12caaf; }
template <> constexpr unsigned int clcppTypeHash< NamespaceB::SecondNamedNSClass >() { return 0x5b297223; }
template <> constexpr unsigned int clcppTypeHash< Offsets::Int64InPolymorphicStruct >() { return 0x5c5e4fed; }
template <> constexpr unsigned int clcppTypeHash< clcpp::Qualifier >() { return 0x5e2c74ee; }
template <> constexpr unsigned int clcppTypeHash< TestClassImpl::B >() { return 0x5e48cf7e; }
template <> constexpr unsigned int clcppTypeHash< TestTemplates::ParamStruct >() { return 0x5f2e8b87; }
template <> constexpr unsigned int clcppTypeHash< Stuff::NestedStruct >() { return 0x5fffecc7; }
template <> constexpr unsigned int clcppTypeHash< Inheritance::DerivedClass >() { return 0x606339c0; }
template <> constexpr unsigned int clcppTypeHash< clcpp::TemplateType >() { return 0x6df382f3; }
template <> constexpr unsigned int clcppTypeHash< OuterNamespace::InnerNamespace::OuterClass >() { return 0x6ffaf3d1; }
template <> constexpr unsigned int clcppTypeHash< ::StructGlobalA >() { return 0x79596665; }
template <> constexpr unsigned int clcppTypeHash< Funcs::ThreeStruct >() { return 0x7cf15831; }
template <> constexpr unsigned int clcppTypeHash< Offsets::K >() { return 0x7d919415; }
template <> constexpr unsigned int clcppTypeHash< TestAttributes::ClassAttr >() { return 0x7dae28a6; }
template <> constexpr unsigned int clcppTypeHash< Offsets::PolymorphicStruct >() { return 0x8268b4f5; }
template <> constexpr unsigned int clcppTypeHash< TestArrays::S >() { return 0x879ffff9; }
template <> constexpr unsigned int clcppTypeHash< ::SecondType >() { return 0x90b4eaa4; }
template <> constexpr unsigned int clcppTypeHash< TestAttributes::StructAttr >() { return 0x9239313e; }
template <> constexpr unsigned int clcppTypeHash< Inheritance::ErrorClass >() { return 0x98bbe057; }
template <> constexpr unsigned int clcppTypeHash< clcpp::Name >() { return 0x9979dbb8; }
template <> constexpr unsigned int clcppTypeHash< clcpp::EnumConstant >() { return 0x9a3880ca; }
template <> constexpr unsigned int clcppTypeHash< Inheritance::BaseClass >() { return 0xa1ac1377; }
template <> constexpr unsigned int clcppTypeHash< clutl::JSONContext >() { return 0xa728fe61; }
template <> constexpr unsigned int clcppTypeHash< Offsets::H >() { return 0xaa62cff5; }
template <> constexpr unsigned int clcppTypeHash< clcpp::FloatAttribute >() { return 0xaed2af7a; }
template <> constexpr unsigned int clcppTypeHash< Offsets::DoubleStruct >() { return 0xb094f8ca; }
template <> constexpr unsigned int clcppTypeHash< ::FieldTypes >() { return 0xb23c6445; }
template <> constexpr unsigned int clcppTypeHash< clutl::Object >() { return 0xb241b0bc; }
template <> constexpr unsigned int clcppTypeHash< Funcs::OddStruct >() { return 0xb43e823a; }
template <> constexpr unsigned int clcppTypeHash< Stuff::BaseStruct >() { return 0xb6f19d2a; }
template <> constexpr unsigned int clcppTypeHash< TestMissingType::Inherit >() { return 0xb7d04294; }
template <> constexpr unsigned int clcppTypeHash< Offsets::I >() { return 0xbc70ea82; }
template <> constexpr unsigned int clcppTypeHash< ::ClassGlobalA >() { return 0xbd4ac0ce; }
template <> constexpr unsigned int clcppTypeHash< Offsets::J >() { return 0xbed2c1df; }
template <> constexpr unsigned int clcppTypeHash< clcpp::Template >() { return 0xbf2b7493; }
template <> constexpr unsigned int clcppTypeHash< clutl::WriteBuffer >() { return 0xc172c08a; }
template <> constexpr unsigned int clcppTypeHash< Offsets::E >() { return 0xc48d6fab; }
template <> constexpr unsigned int clcppTypeHash< Funcs::EmptyStruct >() { return 0xc7e08e95; }
template <> constexpr unsigned int clcppTypeHash< clcpp::IReadIterator >() { return 0xcb408e5a; }
template <> constexpr unsigned int clcppTypeHash< Inheritance::MultipleInheritanceClass >() { return 0xcec33cb6; }
template <> constexpr unsigned int clcppTypeHash< NamespaceA::NamedNSClassA >() { return 0xd08a233b; }
template <> constexpr unsigned int clcppTypeHash< clutl::ReadBuffer >() { return 0xd5f68809; }
template <> constexpr unsigned int clcppTypeHash< Offsets::VirtualInheritanceBase >() { return 0xd7d9b2da; }
template <> constexpr unsigned int clcppTypeHash< Stuff::DerivedStruct >() { return 0xd9d63cf4; }
template <> constexpr unsigned int clcppTypeHash< jsontest::AllFields >() { return 0xdce5d7ca; }
template <> constexpr unsigned int clcppTypeHash< Offsets::DoubleInPolymorphicStruct >() { return 0xdd6a1817; }
template <> constexpr unsigned int clcppTypeHash< NamespaceA::ShouldReflect >() { return 0xe3f51cfb; }
template <> constexpr unsigned int clcppTypeHash< Offsets::D >() { return 0xe52b5d7c; }
template <> constexpr unsigned int clcppTypeHash< clcpp::FlagAttribute >() { return 0xe7a31e7c; }
template <> constexpr unsigned int clcppTypeHash< ::Blah2 >() { return 0xea5fbc5c; }
template <> constexpr unsigned int clcppTypeHash< TestTypedefs::Container >() { return 0xed9cb91d; }
template <> constexpr unsigned int clcppTypeHash< clcpp::Class >() { return 0xf3a2d31c; }
template <> constexpr unsigned int clcppTypeHash< Offsets::VirtualInheritancePolymorphicBase >() { return 0xf48810d5; }
template <> constexpr unsigned int clcppTypeHash< clcpp::Namespace >() { return 0xf488dba4; }
template <> constexpr unsigned int clcppTypeHash< clcpp::ReadIterator >() { return 0xfa7edbdd; }
template <> constexpr unsigned int clcppTypeHash< Offsets::F >() { return 0xfdaee797; }
template <> constexpr unsigned int clcppTypeHash< TestTemplates::Fields >() { return 0xfded8cf0; }
template <> constexpr unsigned int clcppTypeHash< ::ScopedEnum >() { return 0xb582ab2; }
template <> constexpr unsigned int clcppTypeHash< void >() { return 0x73da4a; }
template <> constexpr unsigned int clcppTypeHash< unsigned long >() { return 0x815d47a; }
template <> constexpr unsigned int clcppTypeHash< wchar_t >() { return 0x311714bf; }
template <> constexpr unsigned int clcppTypeHash< short >() { return 0x34a7768f; }
template <> constexpr unsigned int clcppTypeHash< long >() { return 0x38da33ef; }
template <> constexpr unsigned int clcppTypeHash< unsigned char >() { return 0x49400eb8; }
template <> constexpr unsigned int clcppTypeHash< long long >() { return 0x532220b8; }
template <> constexpr unsigned int clcppTypeHash< double >() { return 0x68e6d3ff; }
template <> constexpr unsigned int clcppTypeHash< bool >() { return 0x8fd0d24a; }
template <> constexpr unsigned int clcppTypeHash< unsigned short >() { return 0x919d1bf1; }
template <> constexpr unsigned int clcppTypeHash< unsigned int >() { return 0x91ee210a; }
template <> constexpr unsigned int clcppTypeHash< float >() { return 0x95fb9fe8; }
template <> constexpr unsigned int clcppTypeHash< char >() { return 0xb7155e0b; }
template <> constexpr unsigned int clcppTypeHash< unsigned long long >() { return 0xc058aa24; }
template <> constexpr unsigned int clcppTypeHash< int >() { return 0xce831ddf; }
#if defined(CLCPP_USING_MSVC)
template <> constexpr unsigned int clcppTypeHash< jsontest::NoInit >() { return 0x80e9c2f; }
template <> constexpr unsigned int clcppTypeHash< NamespaceB::SecondNamedNSEnum >() { return 0xcd202b4; }
template <> constexpr unsigned int clcppTypeHash< ::EnumA >() { return 0xe7b9fed; }
template <> constexpr unsigned int clcppTypeHash< Stuff::NoInit >() { return 0x197dc8fa; }
template <> constexpr unsigned int clcppTypeHash< OuterNamespace::InnerNamespace::InnerNSEnum >() { return 0x2b306cdd; }
template <> constexpr unsigned int clcppTypeHash< TestTemplates::ParamEnum >() { return 0x4da531a1; }
template <> constexpr unsigned int clcppTypeHash< ::NamedGlobalEnum >() { return 0x66a0c9b9; }
template <> constexpr unsigned int clcppTypeHash< Stuff::SomeEnum >() { return 0x670073ec; }
template <> constexpr unsigned int clcppTypeHash< TestAttributes::GlobalEnumAttr >() { return 0x7fc1fd67; }
template <> constexpr unsigned int clcppTypeHash< NamespaceF::EnumA >() { return 0x8b4988f1; }
template <> constexpr unsigned int clcppTypeHash< NamespaceB::AnotherSecondNamedEnum >() { return 0xc4adb08c; }
template <> constexpr unsigned int clcppTypeHash< jsontest::Value >() { return 0xda7ad107; }
template <> constexpr unsigned int clcppTypeHash< NamespaceA::NamedNSEnumA >() { return 0xeb9bd0d4; }
template <> constexpr unsigned int clcppTypeHash< NamespaceA::NamedNSEnumB >() { return 0xf8875b4f; }
#endif
