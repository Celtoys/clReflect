
import clReflect
import Utils


# Tell clReflect where to find the executables - note they're config-specific
clReflect.SetInstallLocation("../../build/bin/" + env.ConfigName)

sys_include_paths = [
	MSVCPlatform.VCIncludeDir
]

include_paths = [
	"..",
	"../../inc",
]

defines = [
	"_SCL_SECURE_NO_WARNINGS",
	"_CRT_SECURE_NO_WARNINGS"
]

libs = [
    "clcpp.lib",
    "clutil.lib",
]

lib_paths_debug = [
	"../../build/bin/debug",
]

lib_paths_release = [
	"../../build/bin/release",
]

config = env.Configs["debug"]
config.IntermediatePath = "../../build/obj/debug/clReflectTest"
config.OutputPath = "../../build/bin/debug"
config.CPPOptions.IncludePaths += include_paths
config.CPPOptions.Defines += defines
config.CPPOptions.CRTType = MSVCPlatform.VCCRTType.MT_DEBUG_DLL
config.CPPOptions.RTTI = False
config.LinkOptions.LibPaths += lib_paths_debug
config.LinkOptions.Subsystem = MSVCPlatform.VCSubsystem.CONSOLE
config.LinkOptions.MapFile = True

config = env.Configs["release"]
config.IntermediatePath = "../../build/obj/release/clReflectTest"
config.OutputPath = "../../build/bin/release"
config.CPPOptions.IncludePaths += include_paths
config.CPPOptions.Defines += defines
config.CPPOptions.CRTType = MSVCPlatform.VCCRTType.MT_DLL
config.CPPOptions.RTTI = False
config.LinkOptions.LibPaths += lib_paths_release
config.LinkOptions.Subsystem = MSVCPlatform.VCSubsystem.CONSOLE
config.LinkOptions.MapFile = True

for config in env.Configs.values():
	config.UpdateCommandLines()

# scan C++ files
# merge csv files, generate C++
# compile generated C++
# link
# cppexport

cpp_codegen = "clcppCodeGen.cpp"

# Generate a list of C++ files to compile without the generated file
cpp_files  = Utils.Glob(".", "*.cpp")
cpp_files += Utils.Glob(".", "*.c")
cpp_files = [ i for i in cpp_files if not i.lower().endswith(cpp_codegen.lower()) ]
hpp_files  = Utils.Glob(".", "*.h")

# Run clscan on all C++ located files, merge the result into one database and generate the C++ file
clr_scan = [ clReflect.CppScan(sys_include_paths, include_paths, env.NewFile(i)) for i in cpp_files ]
clr_codegen = env.NewFile(cpp_codegen)
clr_merge = clReflect.Merge("clRefectTest.csv", clr_scan, clr_codegen)

# Compile all C++ files, including the generated one
cpp_compile = [ env.CPPFile(file) for file in cpp_files ]
cpp_compile += [ env.CPPFile(cpp_codegen) ]

# Link
cpp_lib_files = [ env.NewFile(file) for file in libs ]
cpp_link = env.Link("cltest.exe", cpp_compile, cpp_lib_files)

# Generate the exported reflection database
cpp_map_file = env.NewFile(cpp_link.GetOutputFiles(env)[1])
clr_export = clReflect.CppExport("clReflectTest.cppbin", clr_merge, cpp_map_file)

env.Build([ clr_merge, cpp_link, clr_export ], "cltest")

pibfile = "clReflectTest.pibfile"
VCGenerateProjectFile(env, "clReflectTest", cpp_files + hpp_files + [ pibfile ], cpp_link, pibfile = pibfile)
