
import clReflect
import Utils


# Tell clReflect where to find the executables - note they're config-specific
clReflect.SetInstallLocation("../../build/bin/" + env.ConfigName)

sys_include_paths = [
	MSVCPlatform.VCIncludeDir
]

include_paths = [
	"..",
	"../../inc",
]

defines = [
	"_SCL_SECURE_NO_WARNINGS",
	"_CRT_SECURE_NO_WARNINGS"
]

libs = [
    "clcpp.lib",
    "clutil.lib",
]

lib_paths_debug = [
	"../../build/bin/debug",
]

lib_paths_release = [
	"../../build/bin/release",
]

config = env.Configs["debug"]
config.IntermediatePath = "../../build/obj/debug/clReflectTest"
config.OutputPath = "../../build/bin/debug"
config.CPPOptions.IncludePaths += include_paths
config.CPPOptions.Defines += defines
config.CPPOptions.CRTType = MSVCPlatform.VCCRTType.MT_DEBUG_DLL
config.CPPOptions.RTTI = False
config.LinkOptions.LibPaths += lib_paths_debug
config.LinkOptions.Subsystem = MSVCPlatform.VCSubsystem.CONSOLE
config.LinkOptions.MapFile = True

config = env.Configs["release"]
config.IntermediatePath = "../../build/obj/release/clReflectTest"
config.OutputPath = "../../build/bin/release"
config.CPPOptions.IncludePaths += include_paths
config.CPPOptions.Defines += defines
config.CPPOptions.CRTType = MSVCPlatform.VCCRTType.MT_DLL
config.CPPOptions.RTTI = False
config.LinkOptions.LibPaths += lib_paths_release
config.LinkOptions.Subsystem = MSVCPlatform.VCSubsystem.CONSOLE
config.LinkOptions.MapFile = True

# 1. clReflectScan on all C++ files, except existing clcppCodeGen.cpp. Outputs database per C++ file.
# 2. clReflectMerge on output from 1. Outputs a single database and generated C++ file.
# 3. Compile all C++ files, including the generated one.
# 4. Link all compiled C++ files. Outputs MAP file.
# 5. clReflectExport on merged database & linked map file. Outputs final cppbin file.

cltest = CppBuild(env, [ "." ], "cltest.exe", libs, build = False)

cpp_codegen = "clcppCodeGen.cpp"

# Generate the list of C++ files to scan - this excludes the generated C++ file
# Only add the generated C++ file to the compilation list if it's not already there
scan_cpp_files = [ i for i in cltest.cpp_files if not i.lower().endswith(cpp_codegen.lower()) ]
if len(scan_cpp_files) == len(cltest.cpp_files):
	cltest.obj_files += [ env.CPPFile(cpp_codegen) ]

# Run clscan on all C++ located files, merge the result into one database and generate the C++ file
clr_scan = [ clReflect.CppScan(sys_include_paths, include_paths, env.NewFile(i)) for i in scan_cpp_files ]
clr_merge = clReflect.Merge("clRefectTest.csv", clr_scan, env.NewFile(cpp_codegen))

# Generate the exported reflection database
cpp_map_file = env.NewFile(cltest.output.GetOutputFiles(env)[1])
clr_export = clReflect.CppExport("clReflectTest.cppbin", clr_merge, cpp_map_file)

env.Build([ clr_merge, cltest.output, clr_export ], "cltest")

pibfile = "clReflectTest.pibfile"
VCGenerateProjectFile(env, "clReflectTest", cltest.cpp_files + cltest.hpp_files + [ pibfile ], cltest.output, pibfile = pibfile)
