

import os

llvm_source = "../../extern/llvm"
llvm_build = "../../extern/llvm-build"

include_paths = [
    os.path.join(llvm_source, "llvm/include"),
    os.path.join(llvm_build, "include"),
    os.path.join(llvm_source, "clang/include"),
    os.path.join(llvm_build, "tools/clang/include"),
	"..",
	"../../inc",
]

defines = [
	"_SCL_SECURE_NO_WARNINGS",
	"_CRT_SECURE_NO_WARNINGS"
]

# These are to allow clang/llvm to compile without hogging the output window
disabled_warnings = [
    4146,                   # unary minus operator applied to unsigned type, result still unsigned
    4624,                   # 'clang::Preprocessor::MacroInfoChain' : destructor could not be generated because a base class destructor is inaccessible
    4800,                   # 'clang::NestedNameSpecifier *const ' : forcing value to bool 'true' or 'false' (performance warning)
    4355,                   # 'this' : used in base member initializer list
    4291,                   # 'void *operator new(size_t,void *) throw()' : no matching operator delete found; memory will not be freed if initialization throws an exception
    4244,                   # 'return' : conversion from 'uint64_t' to 'unsigned int', possible loss of data
]

libs = [
    "LLVMAnalysis.lib",
    "LLVMBinaryFormat.lib",
    "LLVMBitStreamReader.lib",
    "LLVMCFGuard.lib",
    "LLVMCodeGen.lib",
    "LLVMCore.lib",
    "LLVMDemangle.lib",
    "LLVMFrontendOpenMP.lib",
    "LLVMGlobalISel.lib",
    "LLVMMC.lib",
    "LLVMMCDisassembler.lib",
    "LLVMMCParser.lib",
    "LLVMOption.lib",
    "LLVMProfileData.lib",
    "LLVMRemarks.lib",
    "LLVMScalarOpts.lib",
    "LLVMSelectionDAG.lib",
    "LLVMSupport.lib",
    "LLVMTarget.lib",
    "LLVMTransformUtils.lib",
    "LLVMX86AsmParser.lib",
    "LLVMX86CodeGen.lib",
    "LLVMX86Desc.lib",
    "LLVMX86Info.lib",

    "clangAST.lib",
    "clangAnalysis.lib",
    "clangBasic.lib",
    "clangDriver.lib",
    "clangEdit.lib",
    "clangFrontend.lib",
    "clangLex.lib",
    "clangParse.lib",
    "clangSema.lib",
    "clangSerialization.lib",
    "clangTooling.lib",
    "clangToolingCore.lib",

    "advapi32.lib",
    "shell32.lib",
    "version.lib",

    "clcore.lib",
    "clcpp.lib",
]

lib_paths_debug = [
    WindowsPlatform.x86LibDir,
    os.path.join(llvm_build, "Debug/lib"),
    "../../build/bin/debug",
]

lib_paths_release = [
    WindowsPlatform.x86LibDir,
    os.path.join(llvm_build, "lib/release"),
    "../../build/bin/release",
]

lib_paths_minrelease = [
    WindowsPlatform.x86LibDir,
	os.path.join(llvm_build, "MinSizeRel/lib"),
    "../../build/bin/release",
]

config = env.Configs["debug"]
config.IntermediatePath = "../../build/obj/debug/clReflectScan"
config.OutputPath = "../../build/bin/debug"
config.CPPOptions.IncludePaths += include_paths
config.CPPOptions.Defines += defines
config.CPPOptions.DisabledWarnings = disabled_warnings
config.CPPOptions.CRTType = MSVCPlatform.VCCRTType.MT_DEBUG_DLL
config.LinkOptions.LibPaths += lib_paths_debug
config.LinkOptions.Subsystem = MSVCPlatform.VCSubsystem.CONSOLE

config = env.Configs["release"]
config.IntermediatePath = "../../build/obj/release/clReflectScan"
config.OutputPath = "../../build/bin/release"
config.CPPOptions.IncludePaths += include_paths
config.CPPOptions.Defines += defines
config.CPPOptions.DisabledWarnings = disabled_warnings
config.CPPOptions.CRTType = MSVCPlatform.VCCRTType.MT_DLL
config.LinkOptions.LibPaths += lib_paths_minrelease
config.LinkOptions.Subsystem = MSVCPlatform.VCSubsystem.CONSOLE

# Build the executable
clscan = CppBuild(env, [ "." ], "clscan.exe", libs)
